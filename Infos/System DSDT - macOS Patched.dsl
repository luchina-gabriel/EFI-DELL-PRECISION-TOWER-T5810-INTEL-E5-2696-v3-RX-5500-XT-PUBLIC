/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20200925 (64-bit version)
 * Copyright (c) 2000 - 2020 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of iASLM1YpaG.aml, Wed Apr 24 14:51:08 2024
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x0002BD21 (179489)
 *     Revision         0x02
 *     Checksum         0x2E
 *     OEM ID           "DELL  "
 *     OEM Table ID     "CBX3   "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20091013 (537464851)
 */
DefinitionBlock ("", "DSDT", 2, "DELL  ", "CBX3   ", 0x01072009)
{
    External (IOB2, UnknownObj)

    Name (ENTK, 0x55)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x40)
    Name (SP1O, 0x2E)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEPM, 0x00)
    Name (PEER, 0x00)
    Name (PECS, 0x00)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0xD0000000)
    Name (PELN, 0x10000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, 0x00)
    Name (TMF1, 0x00)
    Name (TMF2, 0x00)
    Name (TMF3, 0x00)
    Name (TTPF, 0x01)
    Name (DTPT, 0x00)
    Name (TTDP, 0x00)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, 0x00)
    Name (TPMF, 0x00)
    Name (PPIV, 0x00)
    Name (TBSW, 0xBC)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (PMBA, 0x0400)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0430)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (SHPC, 0x00)
    Name (PEHP, 0x00)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = 0x01
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (XPRW, 2, NotSerialized)
    {
        PRWP [0x00] = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            PRWP [0x01] = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [0x01])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [0x01])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [0x00]))
        {
            WAKP [0x01] = 0x00
        }
        Else
        {
            WAKP [0x01] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x00)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (ECNT, 0x00)
        Name (OSYS, 0x00)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSYS = 0x05
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x06
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x08
                }

                If (_OSI ("Windows 2006.1"))
                {
                    OSYS = 0x09
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSYS = 0x0A
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x0B
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x0C
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x0D
                }

                If (_OSI ("Linux"))
                {
                    OSYS = 0x01
                }

                If (_OSI ("FreeBSD"))
                {
                    OSYS = 0x02
                }

                If (_OSI ("HP-UX"))
                {
                    OSYS = 0x03
                }

                If (_OSI ("OpenVMS"))
                {
                    OSYS = 0x04
                }

                If ((OSYS >= 0x0D))
                {
                    If ((XCNT == 0x00))
                    {
                        ^PCI0.XHCI.XSEL (0x00)
                        IO80 = 0x84
                        XCNT++
                    }
                }
                ElseIf ((OSYS == 0x0C))
                {
                    If ((ECNT == 0x00))
                    {
                        ^PCI0.XHCI.ESEL ()
                        ECNT++
                    }
                }
                Else
                {
                    IO80 = OSYS /* \_SB_.OSYS */
                }
            }
        }
    }

    Name (BBI0, 0x00000000)
    Name (BBI1, 0x00000000)
    Name (BBI2, 0x00000000)
    Name (BBI3, 0x00000000)
    Name (BBU0, 0x000000FF)
    Name (BBU1, 0x000000FF)
    Name (BBU2, 0x000000FF)
    Name (BBU3, 0x000000FF)
    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (GPCT, SystemIO, 0x0442, 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (GPIV, SystemIO, 0x052C, 0x02)
    Field (GPIV, ByteAcc, NoLock, Preserve)
    {
        GP0I,   1, 
            ,   13, 
        RASI,   1
    }

    OperationRegion (PSYS, SystemMemory, 0xCCA97000, 0x0400)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APC0,   1, 
        APC1,   1, 
        APC2,   1, 
        APC3,   1, 
        APC4,   1, 
        Offset (0x05), 
        RES0,   8, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   1, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   2, 
        CPHP,   8, 
        IIOP,   8, 
        IIOH,   8, 
        CPUT,   8, 
        PRBM,   32, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        MEBM,   16, 
        MEBC,   16, 
        CFMM,   32, 
        TSSZ,   32, 
        M0BS,   64, 
        M1BS,   64, 
        M2BS,   64, 
        M3BS,   64, 
        M4BS,   64, 
        M5BS,   64, 
        M6BS,   64, 
        M7BS,   64, 
        M0RN,   64, 
        M1RN,   64, 
        M2RN,   64, 
        M3RN,   64, 
        M4RN,   64, 
        M5RN,   64, 
        M6RN,   64, 
        M7RN,   64, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        MESP,   16, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        LDIR,   64, 
        PRID,   32, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIO,   16, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        SBS3,   8, 
        SBS4,   8, 
        AHPE,   8, 
        CLOD,   8, 
        HWEN,   2, 
        ACEN,   1, 
        RES1,   5, 
        NITR,   8, 
        EIST,   8, 
        TBST,   8
    }

    OperationRegion (GSTS, SystemIO, 0x0422, 0x02)
    Field (GSTS, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
            ,   12, 
        GP13,   1
    }

    OperationRegion (GPE0, SystemIO, 0x0428, 0x08)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   1, 
        USB1,   1, 
        USB2,   1, 
        USB5,   1, 
            ,   3, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
        USB3,   1, 
        PMB0,   1, 
        USB4,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        USB6,   1, 
        Offset (0x06)
    }

    OperationRegion (GPES, SystemIO, 0x0420, 0x08)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
        US1S,   1, 
        US2S,   1, 
        US5S,   1, 
            ,   1, 
        SMWS,   1, 
            ,   1, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
        US3S,   1, 
        PMBS,   1, 
        US4S,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        US6S,   1, 
        Offset (0x06)
    }

    OperationRegion (PM1S, SystemIO, 0x0400, 0x02)
    Field (PM1S, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        PBNS,   1, 
            ,   1, 
        RTCS,   1
    }

    Method (IPTS, 1, NotSerialized)
    {
        IO80 = 0x72
        US1S = 0x01
        US2S = 0x01
        US5S = 0x01
        SMWS = 0x01
        PMES = 0x01
        US3S = 0x01
        PMBS = 0x01
        US4S = 0x01
        US6S = 0x01
        GPEH = 0x01
        USB1 = 0x01
        USB2 = 0x01
        USB5 = 0x01
        PCIE = 0x01
        PMEE = 0x01
        USB3 = 0x01
        PMB0 = 0x01
        USB4 = 0x01
        USB6 = 0x01
        If ((Arg0 == 0x03))
        {
            \_SB.SMIS = 0xE0
            \_SB.SMIC = 0xBE
        }

        If ((Arg0 == 0x05))
        {
            IOB2 = 0xE0
        }
    }

    Method (_GTS, 1, NotSerialized)  // _GTS: Going To Sleep
    {
        IO80 = Arg0
    }

    Scope (_SB)
    {
        Name (PRUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Method (USTA, 1, NotSerialized)
        {
            Local6 = 0x00
            Local6 = (PRBM >> Arg0)
            Local6 &= 0x01
            If ((Local6 == 0x00))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (UNC3)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU3) /* \BBU3 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x03))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC3.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC2)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xBF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU2) /* \BBU2 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x02))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC2.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC1)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x7F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU1) /* \BBU1 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x01))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC1.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU0) /* \BBU0 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK0")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x00))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }
    }

    Method (IWAK, 1, Serialized)
    {
        IO80 = 0x73
        Notify (\_SB.PCI0.EH01, 0x00) // Bus Check
        Notify (\_SB.PCI0.EHC2, 0x00) // Bus Check
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHCI.XWAK ()
            If (RTCS){}
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.SMIS = 0xE1
            \_SB.SMIC = 0xBE
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                Local6 = (PRBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (TMID, 2, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local1 = (Local0 + Arg1)
                Return (Local1)
            }

            Name (APTC, Buffer (0x30)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x10, 0x12, 0x14,  // ........
                /* 0008 */  0x16, 0x20, 0x22, 0x24, 0x26, 0x28, 0x30, 0x32,  // . "$&(02
                /* 0010 */  0x34, 0x36, 0x01, 0x03, 0x05, 0x07, 0x09, 0x11,  // 46......
                /* 0018 */  0x13, 0x15, 0x17, 0x21, 0x23, 0x25, 0x27, 0x29,  // ...!#%')
                /* 0020 */  0x31, 0x33, 0x35, 0x37, 0xFF, 0xFF, 0xFF, 0xFF,  // 1357....
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Method (TPID, 2, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = P0ID /* \P0ID */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = P1ID /* \P1ID */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = P2ID /* \P2ID */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = P3ID /* \P3ID */
                }

                Local0 += DerefOf (APTC [Arg1])
                Return (Local0)
            }

            Method (MSTA, 1, NotSerialized)
            {
                Local6 = (MEBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (CSTA, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = 0x00
                Local1 = TPID (Arg0, Arg1)
                Local2 = 0x00
                Local2 += DerefOf (APTC [Arg1])
                If ((Local2 == 0xFF))
                {
                    Return (0x00)
                }

                If ((Arg0 == 0x00))
                {
                    Local0 = (P0BM >> Local2)
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = (P1BM >> Local2)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = (P2BM >> Local2)
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = (P3BM >> Local2)
                }

                Local0 &= 0x01
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, NotSerialized)
            {
                Name (APIC, Buffer (0x08){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PRID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                TYPE = 0x00
                LLEN = 0x08
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    PRID = 0xFF
                    APID = 0xFF
                }
                Else
                {
                    Local0 = APID /* \_SB_.LAPC.APID */
                    PRID = Local0
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.LAPC.APIC */
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Processor (CP00, 0x00, 0x00000410, 0x06){}
                Processor (CP01, 0x02, 0x00000410, 0x06){}
                Processor (CP02, 0x04, 0x00000410, 0x06){}
                Processor (CP03, 0x06, 0x00000410, 0x06){}
                Processor (CP04, 0x08, 0x00000410, 0x06){}
                Processor (CP05, 0x10, 0x00000410, 0x06){}
                Processor (CP06, 0x12, 0x00000410, 0x06){}
                Processor (CP07, 0x14, 0x00000410, 0x06){}
                Processor (CP08, 0x16, 0x00000410, 0x06){}
                Processor (CP09, 0x20, 0x00000410, 0x06){}
                Processor (CP0A, 0x22, 0x00000410, 0x06){}
                Processor (CP0B, 0x24, 0x00000410, 0x06){}
                Processor (CP0C, 0x26, 0x00000410, 0x06){}
                Processor (CP0D, 0x28, 0x00000410, 0x06){}
                Processor (CP0E, 0x30, 0x00000410, 0x06){}
                Processor (CP0F, 0x32, 0x00000410, 0x06){}
                Processor (CP10, 0x34, 0x00000410, 0x06){}
                Processor (CP11, 0x36, 0x00000410, 0x06){}
                Processor (CP12, 0x01, 0x00000410, 0x06){}
                Processor (CP13, 0x03, 0x00000410, 0x06){}
                Processor (CP14, 0x05, 0x00000410, 0x06){}
                Processor (CP15, 0x07, 0x00000410, 0x06){}
                Processor (CP16, 0x09, 0x00000410, 0x06){}
                Processor (CP17, 0x11, 0x00000410, 0x06){}
                Processor (CP18, 0x13, 0x00000410, 0x06){}
                Processor (CP19, 0x15, 0x00000410, 0x06){}
                Processor (CP1A, 0x17, 0x00000410, 0x06){}
                Processor (CP1B, 0x21, 0x00000410, 0x06){}
                Processor (CP1C, 0x23, 0x00000410, 0x06){}
                Processor (CP1D, 0x25, 0x00000410, 0x06){}
                Processor (CP1E, 0x27, 0x00000410, 0x06){}
                Processor (CP1F, 0x29, 0x00000410, 0x06){}
                Processor (CP20, 0x31, 0x00000410, 0x06){}
                Processor (CP21, 0x33, 0x00000410, 0x06){}
                Processor (CP22, 0x35, 0x00000410, 0x06){}
                Processor (CP23, 0x37, 0x00000410, 0x06){}
                Processor (CP24, 0xFF, 0x00000410, 0x06){}
                Processor (CP25, 0xFF, 0x00000410, 0x06){}
                Processor (CP26, 0xFF, 0x00000410, 0x06){}
                Processor (CP27, 0xFF, 0x00000410, 0x06){}
                Processor (CP28, 0xFF, 0x00000410, 0x06){}
                Processor (CP29, 0xFF, 0x00000410, 0x06){}
                Processor (CP2A, 0xFF, 0x00000410, 0x06){}
                Processor (CP2B, 0xFF, 0x00000410, 0x06){}
                Processor (CP2C, 0xFF, 0x00000410, 0x06){}
                Processor (CP2D, 0xFF, 0x00000410, 0x06){}
                Processor (CP2E, 0xFF, 0x00000410, 0x06){}
                Processor (CP2F, 0xFF, 0x00000410, 0x06){}
            }

            Device (SCK1)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK1")  // _UID: Unique ID
                Processor (CP00, 0xFF, 0x00000410, 0x06){}
                Processor (CP01, 0xFF, 0x00000410, 0x06){}
                Processor (CP02, 0xFF, 0x00000410, 0x06){}
                Processor (CP03, 0xFF, 0x00000410, 0x06){}
                Processor (CP04, 0xFF, 0x00000410, 0x06){}
                Processor (CP05, 0xFF, 0x00000410, 0x06){}
                Processor (CP06, 0xFF, 0x00000410, 0x06){}
                Processor (CP07, 0xFF, 0x00000410, 0x06){}
                Processor (CP08, 0xFF, 0x00000410, 0x06){}
                Processor (CP09, 0xFF, 0x00000410, 0x06){}
                Processor (CP0A, 0xFF, 0x00000410, 0x06){}
                Processor (CP0B, 0xFF, 0x00000410, 0x06){}
                Processor (CP0C, 0xFF, 0x00000410, 0x06){}
                Processor (CP0D, 0xFF, 0x00000410, 0x06){}
                Processor (CP0E, 0xFF, 0x00000410, 0x06){}
                Processor (CP0F, 0xFF, 0x00000410, 0x06){}
                Processor (CP10, 0xFF, 0x00000410, 0x06){}
                Processor (CP11, 0xFF, 0x00000410, 0x06){}
                Processor (CP12, 0xFF, 0x00000410, 0x06){}
                Processor (CP13, 0xFF, 0x00000410, 0x06){}
                Processor (CP14, 0xFF, 0x00000410, 0x06){}
                Processor (CP15, 0xFF, 0x00000410, 0x06){}
                Processor (CP16, 0xFF, 0x00000410, 0x06){}
                Processor (CP17, 0xFF, 0x00000410, 0x06){}
                Processor (CP18, 0xFF, 0x00000410, 0x06){}
                Processor (CP19, 0xFF, 0x00000410, 0x06){}
                Processor (CP1A, 0xFF, 0x00000410, 0x06){}
                Processor (CP1B, 0xFF, 0x00000410, 0x06){}
                Processor (CP1C, 0xFF, 0x00000410, 0x06){}
                Processor (CP1D, 0xFF, 0x00000410, 0x06){}
                Processor (CP1E, 0xFF, 0x00000410, 0x06){}
                Processor (CP1F, 0xFF, 0x00000410, 0x06){}
                Processor (CP20, 0xFF, 0x00000410, 0x06){}
                Processor (CP21, 0xFF, 0x00000410, 0x06){}
                Processor (CP22, 0xFF, 0x00000410, 0x06){}
                Processor (CP23, 0xFF, 0x00000410, 0x06){}
                Processor (CP24, 0xFF, 0x00000410, 0x06){}
                Processor (CP25, 0xFF, 0x00000410, 0x06){}
                Processor (CP26, 0xFF, 0x00000410, 0x06){}
                Processor (CP27, 0xFF, 0x00000410, 0x06){}
                Processor (CP28, 0xFF, 0x00000410, 0x06){}
                Processor (CP29, 0xFF, 0x00000410, 0x06){}
                Processor (CP2A, 0xFF, 0x00000410, 0x06){}
                Processor (CP2B, 0xFF, 0x00000410, 0x06){}
                Processor (CP2C, 0xFF, 0x00000410, 0x06){}
                Processor (CP2D, 0xFF, 0x00000410, 0x06){}
                Processor (CP2E, 0xFF, 0x00000410, 0x06){}
                Processor (CP2F, 0xFF, 0x00000410, 0x06){}
            }

            Device (SCK2)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK2")  // _UID: Unique ID
                Processor (CP00, 0xFF, 0x00000410, 0x06){}
                Processor (CP01, 0xFF, 0x00000410, 0x06){}
                Processor (CP02, 0xFF, 0x00000410, 0x06){}
                Processor (CP03, 0xFF, 0x00000410, 0x06){}
                Processor (CP04, 0xFF, 0x00000410, 0x06){}
                Processor (CP05, 0xFF, 0x00000410, 0x06){}
                Processor (CP06, 0xFF, 0x00000410, 0x06){}
                Processor (CP07, 0xFF, 0x00000410, 0x06){}
                Processor (CP08, 0xFF, 0x00000410, 0x06){}
                Processor (CP09, 0xFF, 0x00000410, 0x06){}
                Processor (CP0A, 0xFF, 0x00000410, 0x06){}
                Processor (CP0B, 0xFF, 0x00000410, 0x06){}
                Processor (CP0C, 0xFF, 0x00000410, 0x06){}
                Processor (CP0D, 0xFF, 0x00000410, 0x06){}
                Processor (CP0E, 0xFF, 0x00000410, 0x06){}
                Processor (CP0F, 0xFF, 0x00000410, 0x06){}
                Processor (CP10, 0xFF, 0x00000410, 0x06){}
                Processor (CP11, 0xFF, 0x00000410, 0x06){}
                Processor (CP12, 0xFF, 0x00000410, 0x06){}
                Processor (CP13, 0xFF, 0x00000410, 0x06){}
                Processor (CP14, 0xFF, 0x00000410, 0x06){}
                Processor (CP15, 0xFF, 0x00000410, 0x06){}
                Processor (CP16, 0xFF, 0x00000410, 0x06){}
                Processor (CP17, 0xFF, 0x00000410, 0x06){}
                Processor (CP18, 0xFF, 0x00000410, 0x06){}
                Processor (CP19, 0xFF, 0x00000410, 0x06){}
                Processor (CP1A, 0xFF, 0x00000410, 0x06){}
                Processor (CP1B, 0xFF, 0x00000410, 0x06){}
                Processor (CP1C, 0xFF, 0x00000410, 0x06){}
                Processor (CP1D, 0xFF, 0x00000410, 0x06){}
                Processor (CP1E, 0xFF, 0x00000410, 0x06){}
                Processor (CP1F, 0xFF, 0x00000410, 0x06){}
                Processor (CP20, 0xFF, 0x00000410, 0x06){}
                Processor (CP21, 0xFF, 0x00000410, 0x06){}
                Processor (CP22, 0xFF, 0x00000410, 0x06){}
                Processor (CP23, 0xFF, 0x00000410, 0x06){}
                Processor (CP24, 0xFF, 0x00000410, 0x06){}
                Processor (CP25, 0xFF, 0x00000410, 0x06){}
                Processor (CP26, 0xFF, 0x00000410, 0x06){}
                Processor (CP27, 0xFF, 0x00000410, 0x06){}
                Processor (CP28, 0xFF, 0x00000410, 0x06){}
                Processor (CP29, 0xFF, 0x00000410, 0x06){}
                Processor (CP2A, 0xFF, 0x00000410, 0x06){}
                Processor (CP2B, 0xFF, 0x00000410, 0x06){}
                Processor (CP2C, 0xFF, 0x00000410, 0x06){}
                Processor (CP2D, 0xFF, 0x00000410, 0x06){}
                Processor (CP2E, 0xFF, 0x00000410, 0x06){}
                Processor (CP2F, 0xFF, 0x00000410, 0x06){}
            }

            Device (SCK3)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK3")  // _UID: Unique ID
                Processor (CP00, 0xFF, 0x00000410, 0x06){}
                Processor (CP01, 0xFF, 0x00000410, 0x06){}
                Processor (CP02, 0xFF, 0x00000410, 0x06){}
                Processor (CP03, 0xFF, 0x00000410, 0x06){}
                Processor (CP04, 0xFF, 0x00000410, 0x06){}
                Processor (CP05, 0xFF, 0x00000410, 0x06){}
                Processor (CP06, 0xFF, 0x00000410, 0x06){}
                Processor (CP07, 0xFF, 0x00000410, 0x06){}
                Processor (CP08, 0xFF, 0x00000410, 0x06){}
                Processor (CP09, 0xFF, 0x00000410, 0x06){}
                Processor (CP0A, 0xFF, 0x00000410, 0x06){}
                Processor (CP0B, 0xFF, 0x00000410, 0x06){}
                Processor (CP0C, 0xFF, 0x00000410, 0x06){}
                Processor (CP0D, 0xFF, 0x00000410, 0x06){}
                Processor (CP0E, 0xFF, 0x00000410, 0x06){}
                Processor (CP0F, 0xFF, 0x00000410, 0x06){}
                Processor (CP10, 0xFF, 0x00000410, 0x06){}
                Processor (CP11, 0xFF, 0x00000410, 0x06){}
                Processor (CP12, 0xFF, 0x00000410, 0x06){}
                Processor (CP13, 0xFF, 0x00000410, 0x06){}
                Processor (CP14, 0xFF, 0x00000410, 0x06){}
                Processor (CP15, 0xFF, 0x00000410, 0x06){}
                Processor (CP16, 0xFF, 0x00000410, 0x06){}
                Processor (CP17, 0xFF, 0x00000410, 0x06){}
                Processor (CP18, 0xFF, 0x00000410, 0x06){}
                Processor (CP19, 0xFF, 0x00000410, 0x06){}
                Processor (CP1A, 0xFF, 0x00000410, 0x06){}
                Processor (CP1B, 0xFF, 0x00000410, 0x06){}
                Processor (CP1C, 0xFF, 0x00000410, 0x06){}
                Processor (CP1D, 0xFF, 0x00000410, 0x06){}
                Processor (CP1E, 0xFF, 0x00000410, 0x06){}
                Processor (CP1F, 0xFF, 0x00000410, 0x06){}
                Processor (CP20, 0xFF, 0x00000410, 0x06){}
                Processor (CP21, 0xFF, 0x00000410, 0x06){}
                Processor (CP22, 0xFF, 0x00000410, 0x06){}
                Processor (CP23, 0xFF, 0x00000410, 0x06){}
                Processor (CP24, 0xFF, 0x00000410, 0x06){}
                Processor (CP25, 0xFF, 0x00000410, 0x06){}
                Processor (CP26, 0xFF, 0x00000410, 0x06){}
                Processor (CP27, 0xFF, 0x00000410, 0x06){}
                Processor (CP28, 0xFF, 0x00000410, 0x06){}
                Processor (CP29, 0xFF, 0x00000410, 0x06){}
                Processor (CP2A, 0xFF, 0x00000410, 0x06){}
                Processor (CP2B, 0xFF, 0x00000410, 0x06){}
                Processor (CP2C, 0xFF, 0x00000410, 0x06){}
                Processor (CP2D, 0xFF, 0x00000410, 0x06){}
                Processor (CP2E, 0xFF, 0x00000410, 0x06){}
                Processor (CP2F, 0xFF, 0x00000410, 0x06){}
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }

        Scope (\_SB)
        {
            Name (\PCAP, 0x00010000)
            Name (\PSSW, 0x9B)
            Name (\HWPS, 0x00)
            Name (\POSC, 0x00)
            Name (NITL, 0x00)
            OperationRegion (CMOS, SystemIO, 0x70, 0x04)
            Field (CMOS, ByteAcc, NoLock, Preserve)
            {
                IDX0,   7, 
                Offset (0x01), 
                DAT0,   8, 
                IDX1,   7, 
                Offset (0x03), 
                DAT1,   8
            }

            IndexField (IDX1, DAT1, ByteAcc, NoLock, Preserve)
            {
                Offset (0x1B), 
                WIWH,   8
            }

            Method (SWWE, 1, NotSerialized)
            {
                SMIS = 0x00
                SMIC = Arg0
            }

            Device (WERR)
            {
                Name (_HID, EisaId ("PNP0C33") /* Error Device */)  // _HID: Hardware ID
                Name (_UID, 0x00)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((OSYS >= 0x0C))
                    {
                        If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (0x00)
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, 0x00, CPB1)
                CreateDWordField (Local0, 0x04, CPB2)
                If ((Arg0 == ToUUID ("ed855e0c-6c90-47bf-a62a-26de0fc5ad5c") /* Unknown UUID */))
                {
                    If ((CPB2 & 0x01))
                    {
                        If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                        {
                            If (~(CPB1 & 0x01))
                            {
                                SWWE (0x9E)
                            }
                        }
                        Else
                        {
                            CPB2 &= 0xFFFFFFFE
                            CPB1 |= 0x10
                            If (~(CPB1 & 0x01)){}
                        }
                    }

                    Return (Local0)
                }
                ElseIf ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
                {
                    If (_OSI ("Windows 2015"))
                    {
                        If (((CPB2 & 0x60) == 0x60))
                        {
                            HWPS = 0x01
                        }
                    }
                    ElseIf (((CPB2 & 0x60) == 0x20))
                    {
                        HWPS = 0x01
                    }

                    If (((CPB2 & 0x1000) == 0x1000))
                    {
                        POSC = 0x01
                    }
                    ElseIf ((((0x13 == \PLAT) || (0x16 == \PLAT)) || ((
                        0x07 == \PLAT) || (0x14 == \PLAT))))
                    {
                        If ((0x00 == NITR))
                        {
                            If (((EIST == 0x01) && (TBST == 0x01)))
                            {
                                If ((NITL == 0x00))
                                {
                                    NITL = 0x01
                                    LoadTable ("NITR", "DELL  ", "CBX3   ", "", "", Zero)
                                }
                            }
                        }
                    }

                    If ((CPB2 & 0x10))
                    {
                        If (((PCAP & 0x00010000) && (WHEA == 0x01)))
                        {
                            WIWH = 0x1B
                            If (~(CPB1 & 0x01))
                            {
                                SWWE (0x9E)
                            }
                        }
                        Else
                        {
                            CPB2 &= 0xFFFFFFEF
                            CPB1 |= 0x10
                            If (~(CPB1 & 0x01)){}
                        }
                    }

                    Return (Local0)
                }
                Else
                {
                    If (_OSI ("Windows 2009"))
                    {
                        If ((((0x13 == \PLAT) || (0x16 == \PLAT)) || ((0x07 == 
                            \PLAT) || (0x14 == \PLAT))))
                        {
                            If ((0x00 == NITR))
                            {
                                If (((EIST == 0x01) && (TBST == 0x01)))
                                {
                                    If ((NITL == 0x00))
                                    {
                                        NITL = 0x01
                                        LoadTable ("NITR", "DELL  ", "CBX3   ", "", "", Zero)
                                    }
                                }
                            }
                        }
                    }

                    Return (^PCI0._OSC (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Device (SRIO)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, 0x00)  // _UID: Unique ID
                Name (_WDG, Buffer (0x14)
                {
                    /* 0000 */  0xF2, 0xF9, 0x7A, 0x0E, 0xA1, 0x44, 0x6F, 0x4C,  // ..z..DoL
                    /* 0008 */  0xA4, 0xB0, 0xA7, 0x67, 0x84, 0x80, 0xDA, 0x61,  // ...g...a
                    /* 0010 */  0x41, 0x41, 0x01, 0x02                           // AA..
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (WMAA, 3, NotSerialized)
                {
                    Local0 = Arg2
                    CreateWordField (Local0, 0x00, CPW0)
                    CreateByteField (Local0, 0x02, CPB2)
                    CreateByteField (Local0, 0x03, CPB3)
                    CreateByteField (Local0, 0x04, CPB4)
                    CreateByteField (Local0, 0x05, CPB5)
                    WSIS = CPW0 /* \_SB_.SRIO.WMAA.CPW0 */
                    WSIB = CPB2 /* \_SB_.SRIO.WMAA.CPB2 */
                    WSID = CPB3 /* \_SB_.SRIO.WMAA.CPB3 */
                    WSIF = CPB4 /* \_SB_.SRIO.WMAA.CPB4 */
                    If ((Arg1 == 0x01))
                    {
                        WSIC = 0x01
                        SWWE (0x97)
                    }

                    If ((Arg1 == 0x02))
                    {
                        WSIC = 0x02
                        SWWE (0x97)
                    }

                    If ((Arg1 == 0x03))
                    {
                        WSIC = 0x03
                        SWWE (0x97)
                    }

                    Return (WSTS) /* \WSTS */
                }
            }
        }
    }

    OperationRegion (EXBU, SystemMemory, 0xCC7A5000, 0x000E)
    Field (EXBU, AnyAcc, Lock, Preserve)
    {
        DAT0,   8, 
        DTPM,   8, 
        DTCM,   8, 
        IDMN,   16, 
        IDPC,   16, 
        DLPN,   40, 
        PMFG,   8, 
        CAMD,   8
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKE, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x14
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1E
            }
        })
        Name (PG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1D
            }
        })
        Name (PG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x24
            }
        })
        Name (PG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x25
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2C
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2D
            }
        })
        Name (PR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x3E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x40
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x46
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x3F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x3F
            }
        })
        Name (PRC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x48
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x4A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x4C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x4D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x4E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x50
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x54
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x55
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x56
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x58
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x5C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x5D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x5E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x57
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x57
            }
        })
        Name (PRE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x60
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x62
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x64
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x65
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x66
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x68
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x6C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x6D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x6E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x70
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x74
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x75
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x76
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x6F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x6F
            }
        })
        Name (PG70, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG70, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                    }
                    Else
                    {
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    Local0 = _BBN ()
                    If ((Local0 == 0x00))
                    {
                        If (~(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x01))
                            {
                                ^BR1A.OSHP ()
                                ^BR1B.OSHP ()
                                ^BR2A.OSHP ()
                                ^BR2B.OSHP ()
                                ^BR2C.OSHP ()
                                ^BR2D.OSHP ()
                                ^BR3A.OSHP ()
                                ^BR3B.OSHP ()
                                ^BR3C.OSHP ()
                                ^BR3D.OSHP ()
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                                GPSH = 0x01
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "PCI0PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03B0,             // Range Minimum
                    0x03DF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0030,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xE0000000,         // Range Minimum
                    0xF7FFBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x17FFC000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P0RS) /* \_SB_.PCI0.P0RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x00, 0x0100)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0E), 
                    STM0,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x00, 0x0100)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x1E), 
                    STM1,   7
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (SLI1, Buffer (0x9E)
                {
                    "791369584825Genuine NVIDIA Certified SLI Ready Motherboard for INTEL CRB           ef7c-Copyright 2014 NVIDIA Corporation All Rights Reserved-394180768352(R)"
                })
                Name (SLI0, Buffer (0x5B)
                {
                    " No SLI key has been loaded because this board does not support SLI.  Intel Coporation (R)"
                })
            }

            Device (WMI1)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "MXM2")  // _UID: Unique ID
                Name (_WDG, Buffer (0x14)
                {
                    /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                    /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                    /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
                })
                Method (WMMX, 3, NotSerialized)
                {
                    CreateDWordField (Arg2, 0x00, FUNC)
                    If ((FUNC == 0x41494C53))
                    {
                        Return (SLI1) /* \_SB_.PCI0.SLI1 */
                    }

                    Return (0x00)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCB, PCI_Config, 0x00, 0x0100)
                Field (LPCB, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    GLE0,   1, 
                    Offset (0xAC), 
                    Offset (0xAE), 
                    XSMB,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (XCRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    OperationRegion (HPTC, SystemMemory, 0xFED1F404, 0x04)
                    Field (HPTC, DWordAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (XSTA, 0, NotSerialized)
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (XCRS, 0, Serialized)
                    {
                        Switch (ToInteger (HPTS))
                        {
                            Case (0x00)
                            {
                                Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                            }
                            Case (0x01)
                            {
                                Return (CRS1) /* \_SB_.PCI0.LPC0.HPET.CRS1 */
                            }
                            Case (0x02)
                            {
                                Return (CRS2) /* \_SB_.PCI0.LPC0.HPET.CRS2 */
                            }
                            Case (0x03)
                            {
                                Return (CRS3) /* \_SB_.PCI0.LPC0.HPET.CRS3 */
                            }

                        }

                        Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                    }
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0580,             // Range Minimum
                            0x0580,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1C000,         // Address Base
                            0x00024000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED45000,         // Address Base
                            0x00047000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12010,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1B000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                }

                OperationRegion (LPCR, PCI_Config, 0x80, 0x04)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    CADR,   3, 
                        ,   1, 
                    CBDR,   3, 
                    Offset (0x01), 
                    LTDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x02), 
                    CALE,   1, 
                    CBLE,   1, 
                    LTLE,   1, 
                    FDLE,   1, 
                    Offset (0x03), 
                    GLLE,   1, 
                    GHLE,   1, 
                    KCLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x04)
                }

                Method (UXDV, 1, Serialized)
                {
                    Local0 = 0xFF
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x03F8)
                        {
                            Local0 = 0x00
                        }
                        Case (0x02F8)
                        {
                            Local0 = 0x01
                        }
                        Case (0x0220)
                        {
                            Local0 = 0x02
                        }
                        Case (0x0228)
                        {
                            Local0 = 0x03
                        }
                        Case (0x0238)
                        {
                            Local0 = 0x04
                        }
                        Case (0x02E8)
                        {
                            Local0 = 0x05
                        }
                        Case (0x0338)
                        {
                            Local0 = 0x06
                        }
                        Case (0x03E8)
                        {
                            Local0 = 0x07
                        }

                    }

                    Return (Local0)
                }

                Method (RRIO, 4, Serialized)
                {
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x00)
                        {
                            CALE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CADR = Local0
                            }

                            If (Arg1)
                            {
                                CALE = 0x01
                            }
                        }
                        Case (0x01)
                        {
                            CBLE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CBDR = Local0
                            }

                            If (Arg1)
                            {
                                CBLE = 0x01
                            }
                        }
                        Case (0x02)
                        {
                            LTLE = 0x00
                            If ((Arg2 == 0x0378))
                            {
                                LTDR = 0x00
                            }

                            If ((Arg2 == 0x0278))
                            {
                                LTDR = 0x01
                            }

                            If ((Arg2 == 0x03BC))
                            {
                                LTDR = 0x02
                            }

                            If (Arg1)
                            {
                                LTLE = 0x01
                            }
                        }
                        Case (0x03)
                        {
                            FDLE = 0x00
                            If ((Arg2 == 0x03F0))
                            {
                                FDDR = 0x00
                            }

                            If ((Arg2 == 0x0370))
                            {
                                FDDR = 0x01
                            }

                            If (Arg1)
                            {
                                FDLE = 0x01
                            }
                        }
                        Case (0x08)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                            {
                                If (Arg1)
                                {
                                    KCLE = 0x01
                                }
                                Else
                                {
                                    KCLE = 0x00
                                }
                            }
                        }
                        Case (0x0B)
                        {
                            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                            {
                                If (Arg1)
                                {
                                    MCLE = 0x01
                                }
                                Else
                                {
                                    MCLE = 0x00
                                }
                            }
                        }
                        Case (0x0C)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }
                        Case (0x0D)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }

                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y00)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y00._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y00._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y00._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        Return (CRS) /* \_SB_.PCI0.LPC0.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x04, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.LPC0.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.LPC0.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (0x00)
                        }

                        Local0 &= 0x01
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((0x01 << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (0x00)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != 0x00)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y04)
                        IRQNoFlags (_Y02)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y03)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y02._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y03._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y04._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y04._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y04._LEN, LEN1)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.LPC0.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.LPC0.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (0x01 << INTR) /* \_SB_.PCI0.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAM = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.LPC0.SIO1.CRS1 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x09, IRQM)
                        CreateByteField (Arg0, 0x0C, DMAM)
                        CreateWordField (Arg0, 0x02, IO11)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO11 & 0xFF)
                        IOAH = (IO11 >> 0x08)
                        If (IRQM)
                        {
                            FindSetRightBit (IRQM, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAM)
                        {
                            FindSetRightBit (DMAM, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Local2 = Arg1
                        If ((Local2 > 0x00))
                        {
                            Local2 -= 0x01
                        }
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x00))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x00, 0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (0x00, 0x00))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x00)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (LPCD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x0C)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x00)
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x01)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x08, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x01)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPC0.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPC0.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x08, 0x03))
                    }
                }
            }

            Device (IP2P)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x0B, 0x03))
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT2.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (ALZA)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG0F) /* \_SB_.AG0F */
                    }

                    Return (PG0F) /* \_SB_.PG0F */
                }

                Device (BR6F)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG10) /* \_SB_.AG10 */
                    }

                    Return (PG10) /* \_SB_.PG10 */
                }

                Device (D077)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (EVMR)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (EVS0)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (EVS1)
            {
                Name (_ADR, 0x00110002)  // _ADR: Address
            }

            Device (EVS2)
            {
                Name (_ADR, 0x00110003)  // _ADR: Address
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.DMI0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.DMI0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.DMI0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.DMI0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.DMI0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.DMI0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.DMI0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.DMI0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.DMI0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.DMI0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.DMI0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.DMI0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.DMI0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.DMI0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.DMI0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.DMI0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.DMI0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.DMI0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1C) /* \_SB_.AG1C */
                    }

                    Return (PG1C) /* \_SB_.PG1C */
                }

                Device (D06C)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1D) /* \_SB_.AG1D */
                    }

                    Return (PG1D) /* \_SB_.PG1D */
                }

                Device (D072)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1E) /* \_SB_.AG1E */
                    }

                    Return (PG1E) /* \_SB_.PG1E */
                }

                Device (D073)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1F) /* \_SB_.AG1F */
                    }

                    Return (PG1F) /* \_SB_.PG1F */
                }

                Device (D074)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG20) /* \_SB_.AG20 */
                    }

                    Return (PG20) /* \_SB_.PG20 */
                }

                Device (D075)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG21) /* \_SB_.AG21 */
                    }

                    Return (PG21) /* \_SB_.PG21 */
                }

                Device (D076)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D078)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG23) /* \_SB_.AG23 */
                    }

                    Return (PG23) /* \_SB_.PG23 */
                }

                Device (D079)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D07A)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG25) /* \_SB_.AG25 */
                    }

                    Return (PG25) /* \_SB_.PG25 */
                }

                Device (D07B)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG70) /* \_SB_.AG70 */
                    }

                    Return (PG70) /* \_SB_.PG70 */
                }

                Device (D07C)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (LAN0)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x0D, 0x04))
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT1.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (EVSS)
            {
                Name (_ADR, 0x00110004)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.EVSS.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (EH01)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EH01.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR12._PLD.PLDP */
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR14._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR15._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR16._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                        }

                        Device (PR17)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR17._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR17._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                        }

                        Device (PR18)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR18._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EH01.HUBN.PR01.PR18._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (OPAC, 0x00)
                Name (XRST, 0x00)
                Name (XUSB, 0x00)
                OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
                Field (XPRT, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x5C), 
                    PR2,    32, 
                    PR2M,   32, 
                    PR3,    32, 
                    PR3M,   32
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PMEE = 0x01
                    }
                    Else
                    {
                        PMEE = 0x00
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = 0x01
                        }
                        Else
                        {
                            OPAC = 0x00
                        }
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == 0x01))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (POSC, 3, NotSerialized)
                {
                    IO80 = 0x81
                    CreateDWordField (Arg2, 0x00, CDW1)
                    CreateDWordField (Arg2, 0x04, CDW2)
                    CreateDWordField (Arg2, 0x08, CDW3)
                    If (((OSYS >= 0x09) && (OSYS <= 0x0C)))
                    {
                        If ((Arg0 < 0x02))
                        {
                            CDW1 |= 0x08
                            IO80 = 0x82
                        }
                    }
                    ElseIf ((Arg0 != 0x01))
                    {
                        CDW1 |= 0x08
                        IO80 = 0x82
                    }

                    If ((XHMD == 0x00))
                    {
                        CDW1 |= 0x02
                        IO80 = 0x83
                    }

                    If (((CDW1 & 0x0E) == 0x00))
                    {
                        If (!(CDW1 & 0x01))
                        {
                            If ((CDW3 & 0x01))
                            {
                                ESEL ()
                                IO80 = 0x85
                                XHMD = 0x00
                            }

                            If ((CDW2 & 0x01))
                            {
                                XSEL (0x00)
                                IO80 = 0x84
                            }
                            Else
                            {
                                ESEL ()
                                IO80 = 0x85
                            }
                        }
                    }

                    Return (Arg2)
                }

                Method (XSEL, 1, Serialized)
                {
                    If ((((XHMD == 0x02) || (XHMD == 0x03)) || Arg0))
                    {
                        If ((XHMD == 0x03))
                        {
                            ^^LPC0.XSMB = 0x01
                        }

                        XUSB = 0x01
                        XRST = 0x01
                        Local0 = 0x00
                        Local0 = (PR3 & 0xFFFFFFC0)
                        PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHCI.PR3M */
                        Local0 = 0x00
                        Local0 = (PR2 & 0xFFFF8000)
                        PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHCI.PR2M */
                    }
                }

                Method (ESEL, 0, Serialized)
                {
                    If (((XHMD == 0x02) || (XHMD == 0x03)))
                    {
                        PR3 &= 0xFFFFFFC0
                        PR2 &= 0xFFFF8000
                        XUSB = 0x00
                        XRST = 0x00
                    }
                }

                Method (XWAK, 0, Serialized)
                {
                    If (((XUSB == 0x01) || (XRST == 0x01)))
                    {
                        XSEL (0x01)
                        Notify (XHCI, 0x00) // Bus Check
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (RHUB)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (HS01)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If ((\PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS01._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x0C
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS01._PLD.PLDP */
                        }
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS02._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x0C
                            }

                            If ((\PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS02._PLD.PLDP */
                        }
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS03._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x81, 0x01, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x2E
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS03._PLD.PLDP */
                        }
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If ((\PLAT == 0x01))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS04._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS04._PLD.PLDP */
                        }
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If ((\PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x01)
                                {
                                    If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS05._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x82, 0x02, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x09) || (\PLAT == 0x13)))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }
                            ElseIf (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS05._PLD.PLDP */
                        }
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS06._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x01
                                }
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS06._PLD.PLDP */
                        }
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                If (0x01)
                                {
                                    If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS07._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x83, 0x03, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x15
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x02
                                }
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS07._PLD.PLDP */
                        }
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            ElseIf (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS08._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                PANL = 0x08
                                VISB = One
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS08._PLD.PLDP */
                        }
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x00)
                                {
                                    If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS09._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x84, 0x04, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x05
                                }
                            }
                            ElseIf (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS09._PLD.PLDP */
                        }
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS10._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (0x00)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                }
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS10._PLD.PLDP */
                        }
                    }

                    Device (HS11)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01){}
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            ElseIf (0x00)
                            {
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x85, 0x05, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (0x00)
                            {
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS11._PLD.PLDP */
                        }
                    }

                    Device (HS12)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (0x01)
                                {
                                    If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (0x01)
                                {
                                    If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x4C
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }
                            ElseIf (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS12._PLD.PLDP */
                        }
                    }

                    Device (HS13)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01){}
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            ElseIf (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                UPCP [0x00] = 0xFF
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x86, 0x06, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((\PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                PANL = 0x08
                                VISB = One
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS13._PLD.PLDP */
                        }
                    }

                    Device (HS14)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x09)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x13)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x16)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x15)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01){}
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (0x00)
                                {
                                    If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((\PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (0x00)
                            {
                                If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If ((\PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x20
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS14._PLD.PLDP */
                        }
                    }

                    Device (SSP1)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                    GTOK = 0x05
                                    GPOS = 0x05
                                }
                            }
                            ElseIf (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._PLD.PLDP */
                        }
                    }

                    Device (SSP2)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Switch (ToInteger (\PLAT))
                            {
                                Case (0x1B)
                                {
                                    UPCP [0x00] = 0x00
                                }

                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x15
                                GTOK = 0x07
                                GPOS = 0x07
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (0x01)
                            {
                                If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                    GTOK = 0x08
                                    GPOS = 0x08
                                }
                            }
                            ElseIf (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._PLD.PLDP */
                        }
                    }

                    Device (SSP3)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x08)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x0C
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If ((\PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x0D
                                GPOS = 0x0D
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If ((\PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._PLD.PLDP */
                        }
                    }

                    Device (SSP4)
                    {
                        Name (_ADR, 0x13)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x2E
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._PLD.PLDP */
                        }
                    }

                    Device (SSP5)
                    {
                        Name (_ADR, 0x14)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (\PLAT))
                                {
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((\PLAT == 0x00) || (\PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x4C
                                GTOK = 0x0C
                                GPOS = 0x0C
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x07
                                GPOS = 0x07
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x01
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._PLD.PLDP */
                        }
                    }

                    Device (SSP6)
                    {
                        Name (_ADR, 0x15)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((\PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If ((\PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x0C
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((\PLAT == 0x03) || (\PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If ((\PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((\PLAT == 0x13) || (\PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((\PLAT == 0x14) || (\PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((\PLAT == 0x11) || (\PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((\PLAT == 0x0A) || (\PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x08
                                GPOS = 0x08
                            }

                            If (((\PLAT == 0x0F) || (\PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((\PLAT == 0x07) || (\PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x02
                                GTOK = 0x07
                                GPOS = 0x07
                            }

                            If ((\PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._PLD.PLDP */
                        }
                    }
                }
            }
        }

        Device (PCI1)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BN80, 0, NotSerialized)
            {
                Return (0x80)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN80 ())
            }

            Name (_UID, 0x80)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR80) /* \_SB_.AR80 */
                }

                Return (PR80) /* \_SB_.PR80 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                    }
                    Else
                    {
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    Local0 = _BBN ()
                    If ((Local0 == 0x00))
                    {
                        If (~(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x01))
                            {
                                ^^PCI0.BR1A.OSHP ()
                                ^^PCI0.BR1B.OSHP ()
                                ^^PCI0.BR2A.OSHP ()
                                ^^PCI0.BR2B.OSHP ()
                                ^^PCI0.BR2C.OSHP ()
                                ^^PCI0.BR2D.OSHP ()
                                ^^PCI0.BR3A.OSHP ()
                                ^^PCI0.BR3B.OSHP ()
                                ^^PCI0.BR3C.OSHP ()
                                ^^PCI0.BR3D.OSHP ()
                                ^QRP0.OSHP ()
                                ^QR1A.OSHP ()
                                ^QR1B.OSHP ()
                                ^QR2A.OSHP ()
                                ^QR2B.OSHP ()
                                ^QR2C.OSHP ()
                                ^QR2D.OSHP ()
                                ^QR3A.OSHP ()
                                ^QR3B.OSHP ()
                                ^QR3C.OSHP ()
                                ^QR3D.OSHP ()
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                                GPSH = 0x01
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI1._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (BN40, 0, NotSerialized)
            {
                Return (BBI1) /* \BBI1 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x02)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO1PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x01)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P1RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x3548,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4158,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P1RS) /* \_SB_.PCI1.P1RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM2,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM3,   7
                }
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (QR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (CB1A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB1B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB1C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB1D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB1E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB1F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB1G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB1H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI2)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNC0, 0, NotSerialized)
            {
                Return (0xC0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNC0 ())
            }

            Name (_UID, 0xC0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARC0) /* \_SB_.ARC0 */
                }

                Return (PRC0) /* \_SB_.PRC0 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                    }
                    Else
                    {
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    Local0 = _BBN ()
                    If ((Local0 == 0x00))
                    {
                        If (~(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x01))
                            {
                                ^^PCI0.BR1A.OSHP ()
                                ^^PCI0.BR1B.OSHP ()
                                ^^PCI0.BR2A.OSHP ()
                                ^^PCI0.BR2B.OSHP ()
                                ^^PCI0.BR2C.OSHP ()
                                ^^PCI0.BR2D.OSHP ()
                                ^^PCI0.BR3A.OSHP ()
                                ^^PCI0.BR3B.OSHP ()
                                ^^PCI0.BR3C.OSHP ()
                                ^^PCI0.BR3D.OSHP ()
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                                ^RRP0.OSHP ()
                                ^RR1A.OSHP ()
                                ^RR1B.OSHP ()
                                ^RR2A.OSHP ()
                                ^RR2B.OSHP ()
                                ^RR2C.OSHP ()
                                ^RR2D.OSHP ()
                                ^RR3A.OSHP ()
                                ^RR3B.OSHP ()
                                ^RR3C.OSHP ()
                                ^RR3D.OSHP ()
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                                GPSH = 0x01
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI2._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (BN80, 0, NotSerialized)
            {
                Return (BBI2) /* \BBI2 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x04)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO2PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x02)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P2RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4558,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P2RS) /* \_SB_.PCI2.P2RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM4,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM5,   7
                }
            }

            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Device (RRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (RR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (CB2A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB2B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB2C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB2D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB2E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB2F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB2G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB2H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI3)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNE0, 0, NotSerialized)
            {
                Return (0xE0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNE0 ())
            }

            Name (_UID, 0xE0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARE0) /* \_SB_.ARE0 */
                }

                Return (PRE0) /* \_SB_.PRE0 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                    }
                    Else
                    {
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    Local0 = _BBN ()
                    If ((Local0 == 0x00))
                    {
                        If (~(CDW1 & 0x01))
                        {
                            If ((CTRL & 0x01))
                            {
                                ^^PCI0.BR1A.OSHP ()
                                ^^PCI0.BR1B.OSHP ()
                                ^^PCI0.BR2A.OSHP ()
                                ^^PCI0.BR2B.OSHP ()
                                ^^PCI0.BR2C.OSHP ()
                                ^^PCI0.BR2D.OSHP ()
                                ^^PCI0.BR3A.OSHP ()
                                ^^PCI0.BR3B.OSHP ()
                                ^^PCI0.BR3C.OSHP ()
                                ^^PCI0.BR3D.OSHP ()
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                                ^SRP0.OSHP ()
                                ^SR1A.OSHP ()
                                ^SR1B.OSHP ()
                                ^SR2A.OSHP ()
                                ^SR2B.OSHP ()
                                ^SR2C.OSHP ()
                                ^SR2D.OSHP ()
                                ^SR3A.OSHP ()
                                ^SR3B.OSHP ()
                                ^SR3C.OSHP ()
                                ^SR3D.OSHP ()
                                GPSH = 0x01
                            }
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI3._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (BNC0, 0, NotSerialized)
            {
                Return (BBI3) /* \BBI3 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x06)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO3PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x03)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P3RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x3748,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4958,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P3RS) /* \_SB_.PCI3.P3RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM6,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM7,   7
                }
            }

            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Device (SRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (SR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xD001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x09, 0x04))
                }
            }

            Device (CB3A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB3B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB3C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB3D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB3E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB3F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB3G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB3H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.IP2P, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.LAN0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            PTS (Arg0)
            IPTS (Arg0)
            TBPS (Arg0)
            \_SB.TPM.TPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        TBWK (Arg0)
        IWAK (Arg0)
        WAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0464, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0xC8)
            IO80 = 0x01
            Sleep (0x0A)
            Local1 = 0x00
            If ((\_SB.PCI0.BR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1A.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PCI0.BR1A.H000, Local0)
                Notify (\_SB.PCI0.BR1A.H001, Local0)
                Notify (\_SB.PCI0.BR1A.H002, Local0)
                Notify (\_SB.PCI0.BR1A.H003, Local0)
                Notify (\_SB.PCI0.BR1A.H004, Local0)
                Notify (\_SB.PCI0.BR1A.H005, Local0)
                Notify (\_SB.PCI0.BR1A.H006, Local0)
                Notify (\_SB.PCI0.BR1A.H007, Local0)
            }

            If ((\_SB.PCI0.BR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1B.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1B.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PCI0.BR1B.H000, Local0)
                Notify (\_SB.PCI0.BR1B.H001, Local0)
                Notify (\_SB.PCI0.BR1B.H002, Local0)
                Notify (\_SB.PCI0.BR1B.H003, Local0)
                Notify (\_SB.PCI0.BR1B.H004, Local0)
                Notify (\_SB.PCI0.BR1B.H005, Local0)
                Notify (\_SB.PCI0.BR1B.H006, Local0)
                Notify (\_SB.PCI0.BR1B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PCI0.BR2A.H000, Local0)
                Notify (\_SB.PCI0.BR2A.H001, Local0)
                Notify (\_SB.PCI0.BR2A.H002, Local0)
                Notify (\_SB.PCI0.BR2A.H003, Local0)
                Notify (\_SB.PCI0.BR2A.H004, Local0)
                Notify (\_SB.PCI0.BR2A.H005, Local0)
                Notify (\_SB.PCI0.BR2A.H006, Local0)
                Notify (\_SB.PCI0.BR2A.H007, Local0)
            }

            If ((\_SB.PCI0.BR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PCI0.BR2B.H000, Local0)
                Notify (\_SB.PCI0.BR2B.H001, Local0)
                Notify (\_SB.PCI0.BR2B.H002, Local0)
                Notify (\_SB.PCI0.BR2B.H003, Local0)
                Notify (\_SB.PCI0.BR2B.H004, Local0)
                Notify (\_SB.PCI0.BR2B.H005, Local0)
                Notify (\_SB.PCI0.BR2B.H006, Local0)
                Notify (\_SB.PCI0.BR2B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PCI0.BR2C.H000, Local0)
                Notify (\_SB.PCI0.BR2C.H001, Local0)
                Notify (\_SB.PCI0.BR2C.H002, Local0)
                Notify (\_SB.PCI0.BR2C.H003, Local0)
                Notify (\_SB.PCI0.BR2C.H004, Local0)
                Notify (\_SB.PCI0.BR2C.H005, Local0)
                Notify (\_SB.PCI0.BR2C.H006, Local0)
                Notify (\_SB.PCI0.BR2C.H007, Local0)
            }

            If ((\_SB.PCI0.BR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PCI0.BR2D.H000, Local0)
                Notify (\_SB.PCI0.BR2D.H001, Local0)
                Notify (\_SB.PCI0.BR2D.H002, Local0)
                Notify (\_SB.PCI0.BR2D.H003, Local0)
                Notify (\_SB.PCI0.BR2D.H004, Local0)
                Notify (\_SB.PCI0.BR2D.H005, Local0)
                Notify (\_SB.PCI0.BR2D.H006, Local0)
                Notify (\_SB.PCI0.BR2D.H007, Local0)
            }

            If ((\_SB.PCI0.BR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PCI0.BR3A.H000, Local0)
                Notify (\_SB.PCI0.BR3A.H001, Local0)
                Notify (\_SB.PCI0.BR3A.H002, Local0)
                Notify (\_SB.PCI0.BR3A.H003, Local0)
                Notify (\_SB.PCI0.BR3A.H004, Local0)
                Notify (\_SB.PCI0.BR3A.H005, Local0)
                Notify (\_SB.PCI0.BR3A.H006, Local0)
                Notify (\_SB.PCI0.BR3A.H007, Local0)
            }

            If ((\_SB.PCI0.BR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PCI0.BR3B.H000, Local0)
                Notify (\_SB.PCI0.BR3B.H001, Local0)
                Notify (\_SB.PCI0.BR3B.H002, Local0)
                Notify (\_SB.PCI0.BR3B.H003, Local0)
                Notify (\_SB.PCI0.BR3B.H004, Local0)
                Notify (\_SB.PCI0.BR3B.H005, Local0)
                Notify (\_SB.PCI0.BR3B.H006, Local0)
                Notify (\_SB.PCI0.BR3B.H007, Local0)
            }

            If ((\_SB.PCI0.BR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PCI0.BR3C.H000, Local0)
                Notify (\_SB.PCI0.BR3C.H001, Local0)
                Notify (\_SB.PCI0.BR3C.H002, Local0)
                Notify (\_SB.PCI0.BR3C.H003, Local0)
                Notify (\_SB.PCI0.BR3C.H004, Local0)
                Notify (\_SB.PCI0.BR3C.H005, Local0)
                Notify (\_SB.PCI0.BR3C.H006, Local0)
                Notify (\_SB.PCI0.BR3C.H007, Local0)
            }

            If ((\_SB.PCI0.BR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PCI0.BR3D.H000, Local0)
                Notify (\_SB.PCI0.BR3D.H001, Local0)
                Notify (\_SB.PCI0.BR3D.H002, Local0)
                Notify (\_SB.PCI0.BR3D.H003, Local0)
                Notify (\_SB.PCI0.BR3D.H004, Local0)
                Notify (\_SB.PCI0.BR3D.H005, Local0)
                Notify (\_SB.PCI0.BR3D.H006, Local0)
                Notify (\_SB.PCI0.BR3D.H007, Local0)
            }

            If ((\_SB.PCI1.QRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI1.QRP0.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x10
                Notify (\_SB.PCI1.QRP0.H000, Local0)
                Notify (\_SB.PCI1.QRP0.H001, Local0)
                Notify (\_SB.PCI1.QRP0.H002, Local0)
                Notify (\_SB.PCI1.QRP0.H003, Local0)
                Notify (\_SB.PCI1.QRP0.H004, Local0)
                Notify (\_SB.PCI1.QRP0.H005, Local0)
                Notify (\_SB.PCI1.QRP0.H006, Local0)
                Notify (\_SB.PCI1.QRP0.H007, Local0)
            }

            If ((\_SB.PCI1.QR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x11
                Notify (\_SB.PCI1.QR2A.H000, Local0)
                Notify (\_SB.PCI1.QR2A.H001, Local0)
                Notify (\_SB.PCI1.QR2A.H002, Local0)
                Notify (\_SB.PCI1.QR2A.H003, Local0)
                Notify (\_SB.PCI1.QR2A.H004, Local0)
                Notify (\_SB.PCI1.QR2A.H005, Local0)
                Notify (\_SB.PCI1.QR2A.H006, Local0)
                Notify (\_SB.PCI1.QR2A.H007, Local0)
            }

            If ((\_SB.PCI1.QR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x12
                Notify (\_SB.PCI1.QR2B.H000, Local0)
                Notify (\_SB.PCI1.QR2B.H001, Local0)
                Notify (\_SB.PCI1.QR2B.H002, Local0)
                Notify (\_SB.PCI1.QR2B.H003, Local0)
                Notify (\_SB.PCI1.QR2B.H004, Local0)
                Notify (\_SB.PCI1.QR2B.H005, Local0)
                Notify (\_SB.PCI1.QR2B.H006, Local0)
                Notify (\_SB.PCI1.QR2B.H007, Local0)
            }

            If ((\_SB.PCI1.QR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x13
                Notify (\_SB.PCI1.QR2C.H000, Local0)
                Notify (\_SB.PCI1.QR2C.H001, Local0)
                Notify (\_SB.PCI1.QR2C.H002, Local0)
                Notify (\_SB.PCI1.QR2C.H003, Local0)
                Notify (\_SB.PCI1.QR2C.H004, Local0)
                Notify (\_SB.PCI1.QR2C.H005, Local0)
                Notify (\_SB.PCI1.QR2C.H006, Local0)
                Notify (\_SB.PCI1.QR2C.H007, Local0)
            }

            If ((\_SB.PCI1.QR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x14
                Notify (\_SB.PCI1.QR2D.H000, Local0)
                Notify (\_SB.PCI1.QR2D.H001, Local0)
                Notify (\_SB.PCI1.QR2D.H002, Local0)
                Notify (\_SB.PCI1.QR2D.H003, Local0)
                Notify (\_SB.PCI1.QR2D.H004, Local0)
                Notify (\_SB.PCI1.QR2D.H005, Local0)
                Notify (\_SB.PCI1.QR2D.H006, Local0)
                Notify (\_SB.PCI1.QR2D.H007, Local0)
            }

            If ((\_SB.PCI1.QR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x15
                Notify (\_SB.PCI1.QR3A.H000, Local0)
                Notify (\_SB.PCI1.QR3A.H001, Local0)
                Notify (\_SB.PCI1.QR3A.H002, Local0)
                Notify (\_SB.PCI1.QR3A.H003, Local0)
                Notify (\_SB.PCI1.QR3A.H004, Local0)
                Notify (\_SB.PCI1.QR3A.H005, Local0)
                Notify (\_SB.PCI1.QR3A.H006, Local0)
                Notify (\_SB.PCI1.QR3A.H007, Local0)
            }

            If ((\_SB.PCI1.QR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x16
                Notify (\_SB.PCI1.QR3B.H000, Local0)
                Notify (\_SB.PCI1.QR3B.H001, Local0)
                Notify (\_SB.PCI1.QR3B.H002, Local0)
                Notify (\_SB.PCI1.QR3B.H003, Local0)
                Notify (\_SB.PCI1.QR3B.H004, Local0)
                Notify (\_SB.PCI1.QR3B.H005, Local0)
                Notify (\_SB.PCI1.QR3B.H006, Local0)
                Notify (\_SB.PCI1.QR3B.H007, Local0)
            }

            If ((\_SB.PCI1.QR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x17
                Notify (\_SB.PCI1.QR3C.H000, Local0)
                Notify (\_SB.PCI1.QR3C.H001, Local0)
                Notify (\_SB.PCI1.QR3C.H002, Local0)
                Notify (\_SB.PCI1.QR3C.H003, Local0)
                Notify (\_SB.PCI1.QR3C.H004, Local0)
                Notify (\_SB.PCI1.QR3C.H005, Local0)
                Notify (\_SB.PCI1.QR3C.H006, Local0)
                Notify (\_SB.PCI1.QR3C.H007, Local0)
            }

            If ((\_SB.PCI1.QR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x18
                Notify (\_SB.PCI1.QR3D.H000, Local0)
                Notify (\_SB.PCI1.QR3D.H001, Local0)
                Notify (\_SB.PCI1.QR3D.H002, Local0)
                Notify (\_SB.PCI1.QR3D.H003, Local0)
                Notify (\_SB.PCI1.QR3D.H004, Local0)
                Notify (\_SB.PCI1.QR3D.H005, Local0)
                Notify (\_SB.PCI1.QR3D.H006, Local0)
                Notify (\_SB.PCI1.QR3D.H007, Local0)
            }

            If ((\_SB.PCI2.RRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI2.RRP0.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x20
                Notify (\_SB.PCI2.RRP0.H000, Local0)
                Notify (\_SB.PCI2.RRP0.H001, Local0)
                Notify (\_SB.PCI2.RRP0.H002, Local0)
                Notify (\_SB.PCI2.RRP0.H003, Local0)
                Notify (\_SB.PCI2.RRP0.H004, Local0)
                Notify (\_SB.PCI2.RRP0.H005, Local0)
                Notify (\_SB.PCI2.RRP0.H006, Local0)
                Notify (\_SB.PCI2.RRP0.H007, Local0)
            }

            If ((\_SB.PCI2.RR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x21
                Notify (\_SB.PCI2.RR2A.H000, Local0)
                Notify (\_SB.PCI2.RR2A.H001, Local0)
                Notify (\_SB.PCI2.RR2A.H002, Local0)
                Notify (\_SB.PCI2.RR2A.H003, Local0)
                Notify (\_SB.PCI2.RR2A.H004, Local0)
                Notify (\_SB.PCI2.RR2A.H005, Local0)
                Notify (\_SB.PCI2.RR2A.H006, Local0)
                Notify (\_SB.PCI2.RR2A.H007, Local0)
            }

            If ((\_SB.PCI2.RR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x22
                Notify (\_SB.PCI2.RR2B.H000, Local0)
                Notify (\_SB.PCI2.RR2B.H001, Local0)
                Notify (\_SB.PCI2.RR2B.H002, Local0)
                Notify (\_SB.PCI2.RR2B.H003, Local0)
                Notify (\_SB.PCI2.RR2B.H004, Local0)
                Notify (\_SB.PCI2.RR2B.H005, Local0)
                Notify (\_SB.PCI2.RR2B.H006, Local0)
                Notify (\_SB.PCI2.RR2B.H007, Local0)
            }

            If ((\_SB.PCI2.RR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x23
                Notify (\_SB.PCI2.RR2C.H000, Local0)
                Notify (\_SB.PCI2.RR2C.H001, Local0)
                Notify (\_SB.PCI2.RR2C.H002, Local0)
                Notify (\_SB.PCI2.RR2C.H003, Local0)
                Notify (\_SB.PCI2.RR2C.H004, Local0)
                Notify (\_SB.PCI2.RR2C.H005, Local0)
                Notify (\_SB.PCI2.RR2C.H006, Local0)
                Notify (\_SB.PCI2.RR2C.H007, Local0)
            }

            If ((\_SB.PCI2.RR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x24
                Notify (\_SB.PCI2.RR2D.H000, Local0)
                Notify (\_SB.PCI2.RR2D.H001, Local0)
                Notify (\_SB.PCI2.RR2D.H002, Local0)
                Notify (\_SB.PCI2.RR2D.H003, Local0)
                Notify (\_SB.PCI2.RR2D.H004, Local0)
                Notify (\_SB.PCI2.RR2D.H005, Local0)
                Notify (\_SB.PCI2.RR2D.H006, Local0)
                Notify (\_SB.PCI2.RR2D.H007, Local0)
            }

            If ((\_SB.PCI2.RR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x25
                Notify (\_SB.PCI2.RR3A.H000, Local0)
                Notify (\_SB.PCI2.RR3A.H001, Local0)
                Notify (\_SB.PCI2.RR3A.H002, Local0)
                Notify (\_SB.PCI2.RR3A.H003, Local0)
                Notify (\_SB.PCI2.RR3A.H004, Local0)
                Notify (\_SB.PCI2.RR3A.H005, Local0)
                Notify (\_SB.PCI2.RR3A.H006, Local0)
                Notify (\_SB.PCI2.RR3A.H007, Local0)
            }

            If ((\_SB.PCI2.RR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x26
                Notify (\_SB.PCI2.RR3B.H000, Local0)
                Notify (\_SB.PCI2.RR3B.H001, Local0)
                Notify (\_SB.PCI2.RR3B.H002, Local0)
                Notify (\_SB.PCI2.RR3B.H003, Local0)
                Notify (\_SB.PCI2.RR3B.H004, Local0)
                Notify (\_SB.PCI2.RR3B.H005, Local0)
                Notify (\_SB.PCI2.RR3B.H006, Local0)
                Notify (\_SB.PCI2.RR3B.H007, Local0)
            }

            If ((\_SB.PCI2.RR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x27
                Notify (\_SB.PCI2.RR3C.H000, Local0)
                Notify (\_SB.PCI2.RR3C.H001, Local0)
                Notify (\_SB.PCI2.RR3C.H002, Local0)
                Notify (\_SB.PCI2.RR3C.H003, Local0)
                Notify (\_SB.PCI2.RR3C.H004, Local0)
                Notify (\_SB.PCI2.RR3C.H005, Local0)
                Notify (\_SB.PCI2.RR3C.H006, Local0)
                Notify (\_SB.PCI2.RR3C.H007, Local0)
            }

            If ((\_SB.PCI2.RR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x28
                Notify (\_SB.PCI2.RR3D.H000, Local0)
                Notify (\_SB.PCI2.RR3D.H001, Local0)
                Notify (\_SB.PCI2.RR3D.H002, Local0)
                Notify (\_SB.PCI2.RR3D.H003, Local0)
                Notify (\_SB.PCI2.RR3D.H004, Local0)
                Notify (\_SB.PCI2.RR3D.H005, Local0)
                Notify (\_SB.PCI2.RR3D.H006, Local0)
                Notify (\_SB.PCI2.RR3D.H007, Local0)
            }

            If ((\_SB.PCI3.SRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SRP0.PMEH (0x00)
            }
            Else
            {
                Local0 = \_SB.PCI3.SRP0.HPEH (0x00)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x30
                Notify (\_SB.PCI3.SRP0.H000, Local0)
                Notify (\_SB.PCI3.SRP0.H001, Local0)
                Notify (\_SB.PCI3.SRP0.H002, Local0)
                Notify (\_SB.PCI3.SRP0.H003, Local0)
                Notify (\_SB.PCI3.SRP0.H004, Local0)
                Notify (\_SB.PCI3.SRP0.H005, Local0)
                Notify (\_SB.PCI3.SRP0.H006, Local0)
                Notify (\_SB.PCI3.SRP0.H007, Local0)
            }

            If ((\_SB.PCI3.SR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x31
                Notify (\_SB.PCI3.SR2A.H000, Local0)
                Notify (\_SB.PCI3.SR2A.H001, Local0)
                Notify (\_SB.PCI3.SR2A.H002, Local0)
                Notify (\_SB.PCI3.SR2A.H003, Local0)
                Notify (\_SB.PCI3.SR2A.H004, Local0)
                Notify (\_SB.PCI3.SR2A.H005, Local0)
                Notify (\_SB.PCI3.SR2A.H006, Local0)
                Notify (\_SB.PCI3.SR2A.H007, Local0)
            }

            If ((\_SB.PCI3.SR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x32
                Notify (\_SB.PCI3.SR2B.H000, Local0)
                Notify (\_SB.PCI3.SR2B.H001, Local0)
                Notify (\_SB.PCI3.SR2B.H002, Local0)
                Notify (\_SB.PCI3.SR2B.H003, Local0)
                Notify (\_SB.PCI3.SR2B.H004, Local0)
                Notify (\_SB.PCI3.SR2B.H005, Local0)
                Notify (\_SB.PCI3.SR2B.H006, Local0)
                Notify (\_SB.PCI3.SR2B.H007, Local0)
            }

            If ((\_SB.PCI3.SR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x33
                Notify (\_SB.PCI3.SR2C.H000, Local0)
                Notify (\_SB.PCI3.SR2C.H001, Local0)
                Notify (\_SB.PCI3.SR2C.H002, Local0)
                Notify (\_SB.PCI3.SR2C.H003, Local0)
                Notify (\_SB.PCI3.SR2C.H004, Local0)
                Notify (\_SB.PCI3.SR2C.H005, Local0)
                Notify (\_SB.PCI3.SR2C.H006, Local0)
                Notify (\_SB.PCI3.SR2C.H007, Local0)
            }

            If ((\_SB.PCI3.SR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x34
                Notify (\_SB.PCI3.SR2D.H000, Local0)
                Notify (\_SB.PCI3.SR2D.H001, Local0)
                Notify (\_SB.PCI3.SR2D.H002, Local0)
                Notify (\_SB.PCI3.SR2D.H003, Local0)
                Notify (\_SB.PCI3.SR2D.H004, Local0)
                Notify (\_SB.PCI3.SR2D.H005, Local0)
                Notify (\_SB.PCI3.SR2D.H006, Local0)
                Notify (\_SB.PCI3.SR2D.H007, Local0)
            }

            If ((\_SB.PCI3.SR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x35
                Notify (\_SB.PCI3.SR3A.H000, Local0)
                Notify (\_SB.PCI3.SR3A.H001, Local0)
                Notify (\_SB.PCI3.SR3A.H002, Local0)
                Notify (\_SB.PCI3.SR3A.H003, Local0)
                Notify (\_SB.PCI3.SR3A.H004, Local0)
                Notify (\_SB.PCI3.SR3A.H005, Local0)
                Notify (\_SB.PCI3.SR3A.H006, Local0)
                Notify (\_SB.PCI3.SR3A.H007, Local0)
            }

            If ((\_SB.PCI3.SR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x36
                Notify (\_SB.PCI3.SR3B.H000, Local0)
                Notify (\_SB.PCI3.SR3B.H001, Local0)
                Notify (\_SB.PCI3.SR3B.H002, Local0)
                Notify (\_SB.PCI3.SR3B.H003, Local0)
                Notify (\_SB.PCI3.SR3B.H004, Local0)
                Notify (\_SB.PCI3.SR3B.H005, Local0)
                Notify (\_SB.PCI3.SR3B.H006, Local0)
                Notify (\_SB.PCI3.SR3B.H007, Local0)
            }

            If ((\_SB.PCI3.SR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x37
                Notify (\_SB.PCI3.SR3C.H000, Local0)
                Notify (\_SB.PCI3.SR3C.H001, Local0)
                Notify (\_SB.PCI3.SR3C.H002, Local0)
                Notify (\_SB.PCI3.SR3C.H003, Local0)
                Notify (\_SB.PCI3.SR3C.H004, Local0)
                Notify (\_SB.PCI3.SR3C.H005, Local0)
                Notify (\_SB.PCI3.SR3C.H006, Local0)
                Notify (\_SB.PCI3.SR3C.H007, Local0)
            }

            If ((\_SB.PCI3.SR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x38
                Notify (\_SB.PCI3.SR3D.H000, Local0)
                Notify (\_SB.PCI3.SR3D.H001, Local0)
                Notify (\_SB.PCI3.SR3D.H002, Local0)
                Notify (\_SB.PCI3.SR3D.H003, Local0)
                Notify (\_SB.PCI3.SR3D.H004, Local0)
                Notify (\_SB.PCI3.SR3D.H005, Local0)
                Notify (\_SB.PCI3.SR3D.H006, Local0)
                Notify (\_SB.PCI3.SR3D.H007, Local0)
            }

            If ((Local0 != 0x00))
            {
                If ((Local1 == 0x01))
                {
                    \_SB.PCI0.BR1A.PMES = 0x01
                    \_SB.PCI0.BR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PCI0.BR1B.PMES = 0x01
                    \_SB.PCI0.BR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PCI0.BR2A.PMES = 0x01
                    \_SB.PCI0.BR2A.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PCI0.BR2B.PMES = 0x01
                    \_SB.PCI0.BR2B.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PCI0.BR2C.PMES = 0x01
                    \_SB.PCI0.BR2C.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PCI0.BR2D.PMES = 0x01
                    \_SB.PCI0.BR2D.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PCI0.BR3A.PMES = 0x01
                    \_SB.PCI0.BR3A.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PCI0.BR3B.PMES = 0x01
                    \_SB.PCI0.BR3B.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PCI0.BR3C.PMES = 0x01
                    \_SB.PCI0.BR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PCI0.BR3D.PMES = 0x01
                    \_SB.PCI0.BR3D.PMEP = 0x01
                }

                If ((Local1 == 0x10))
                {
                    \_SB.PCI1.QRP0.PMES = 0x01
                    \_SB.PCI1.QRP0.PMEP = 0x01
                }

                If ((Local1 == 0x11))
                {
                    \_SB.PCI1.QR2A.PMES = 0x01
                    \_SB.PCI1.QR2A.PMEP = 0x01
                }

                If ((Local1 == 0x12))
                {
                    \_SB.PCI1.QR2B.PMES = 0x01
                    \_SB.PCI1.QR2B.PMEP = 0x01
                }

                If ((Local1 == 0x13))
                {
                    \_SB.PCI1.QR2C.PMES = 0x01
                    \_SB.PCI1.QR2C.PMEP = 0x01
                }

                If ((Local1 == 0x14))
                {
                    \_SB.PCI1.QR2D.PMES = 0x01
                    \_SB.PCI1.QR2D.PMEP = 0x01
                }

                If ((Local1 == 0x15))
                {
                    \_SB.PCI1.QR3A.PMES = 0x01
                    \_SB.PCI1.QR3A.PMEP = 0x01
                }

                If ((Local1 == 0x16))
                {
                    \_SB.PCI1.QR3B.PMES = 0x01
                    \_SB.PCI1.QR3B.PMEP = 0x01
                }

                If ((Local1 == 0x17))
                {
                    \_SB.PCI1.QR3C.PMES = 0x01
                    \_SB.PCI1.QR3C.PMEP = 0x01
                }

                If ((Local1 == 0x18))
                {
                    \_SB.PCI1.QR3D.PMES = 0x01
                    \_SB.PCI1.QR3D.PMEP = 0x01
                }

                If ((Local1 == 0x20))
                {
                    \_SB.PCI2.RRP0.PMES = 0x01
                    \_SB.PCI2.RRP0.PMEP = 0x01
                }

                If ((Local1 == 0x21))
                {
                    \_SB.PCI2.RR2A.PMES = 0x01
                    \_SB.PCI2.RR2A.PMEP = 0x01
                }

                If ((Local1 == 0x22))
                {
                    \_SB.PCI2.RR2B.PMES = 0x01
                    \_SB.PCI2.RR2B.PMEP = 0x01
                }

                If ((Local1 == 0x23))
                {
                    \_SB.PCI2.RR2C.PMES = 0x01
                    \_SB.PCI2.RR2C.PMEP = 0x01
                }

                If ((Local1 == 0x24))
                {
                    \_SB.PCI2.RR2D.PMES = 0x01
                    \_SB.PCI2.RR2D.PMEP = 0x01
                }

                If ((Local1 == 0x25))
                {
                    \_SB.PCI2.RR3A.PMES = 0x01
                    \_SB.PCI2.RR3A.PMEP = 0x01
                }

                If ((Local1 == 0x26))
                {
                    \_SB.PCI2.RR3B.PMES = 0x01
                    \_SB.PCI2.RR3B.PMEP = 0x01
                }

                If ((Local1 == 0x27))
                {
                    \_SB.PCI2.RR3C.PMES = 0x01
                    \_SB.PCI2.RR3C.PMEP = 0x01
                }

                If ((Local1 == 0x28))
                {
                    \_SB.PCI2.RR3D.PMES = 0x01
                    \_SB.PCI2.RR3D.PMEP = 0x01
                }

                If ((Local1 == 0x30))
                {
                    \_SB.PCI3.SRP0.PMES = 0x01
                    \_SB.PCI3.SRP0.PMEP = 0x01
                }

                If ((Local1 == 0x31))
                {
                    \_SB.PCI3.SR2A.PMES = 0x01
                    \_SB.PCI3.SR2A.PMEP = 0x01
                }

                If ((Local1 == 0x32))
                {
                    \_SB.PCI3.SR2B.PMES = 0x01
                    \_SB.PCI3.SR2B.PMEP = 0x01
                }

                If ((Local1 == 0x33))
                {
                    \_SB.PCI3.SR2C.PMES = 0x01
                    \_SB.PCI3.SR2C.PMEP = 0x01
                }

                If ((Local1 == 0x34))
                {
                    \_SB.PCI3.SR2D.PMES = 0x01
                    \_SB.PCI3.SR2D.PMEP = 0x01
                }

                If ((Local1 == 0x35))
                {
                    \_SB.PCI3.SR3A.PMES = 0x01
                    \_SB.PCI3.SR3A.PMEP = 0x01
                }

                If ((Local1 == 0x36))
                {
                    \_SB.PCI3.SR3B.PMES = 0x01
                    \_SB.PCI3.SR3B.PMEP = 0x01
                }

                If ((Local1 == 0x37))
                {
                    \_SB.PCI3.SR3C.PMES = 0x01
                    \_SB.PCI3.SR3C.PMEP = 0x01
                }

                If ((Local1 == 0x38))
                {
                    \_SB.PCI3.SR3D.PMES = 0x01
                    \_SB.PCI3.SR3D.PMEP = 0x01
                }

                PEES = 0x01
                PMEE = 0x00
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.RP01.DEVS () != 0x00))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP02.DEVS () != 0x00))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP03.DEVS () != 0x00))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP04.DEVS () != 0x00))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP05.DEVS () != 0x00))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP06.DEVS () != 0x00))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP07.DEVS () != 0x00))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP08.DEVS () != 0x00))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3D, 0x02) // Device Wake
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == 0x00))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == 0x00))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, 0x01)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y05)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y06)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y07)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y08)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == 0x01))
            {
                CreateDWordField (CRST, \_SB.TPM._Y05._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y05._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y06._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y06._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == 0x01))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y07._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y07._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x0880
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == 0x01))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y08._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y08._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == 0x00))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y08._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = 0x00
                LTFE = 0x00
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == 0x00))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
            ElseIf ((TTDP == 0x01))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Return (0x00)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, 0x00)
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    TIMR = 0x00
                    If ((AMDT == 0x01))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (0x01)
                                TIMR++
                            }
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        If ((((HSTS & 0x02) | (HSTS & 0x01)) == 
                            0x03))
                        {
                            HCMD = 0x01
                        }
                        Else
                        {
                            FERR = 0x01
                            BEGN = 0x00
                        }

                        Return (0x00)
                    }
                }

            }

            Return (0x01)
        }

        Method (CRYF, 3, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    Name (TPMV, Package (0x02)
                    {
                        0x01, 
                        Package (0x02)
                        {
                            0x01, 
                            0x20
                        }
                    })
                    If ((_STA () == 0x00))
                    {
                        Return (Package (0x01)
                        {
                            0x00
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        If ((PPIV == 0x00))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), RQST) /* \_SB_.TPM_.RQST */
                        SRSP = 0x00
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            0x00, 
                            0x00
                        })
                        PPI1 [0x01] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            0x00
                        })
                        SRSP = 0x00
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [0x01] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), RQST) /* \_SB_.TPM_.RQST */
                        FLAG = 0x07
                        OPTN = 0x00
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [0x01]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), RQST) /* \_SB_.TPM_.RQST */
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        ToInteger (DerefOf (Arg3 [0x00]), RQST) /* \_SB_.TPM_.RQST */
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, NotSerialized)
        {
        }
    }

    Scope (_SB)
    {
        Method (TBFP, 1, NotSerialized)
        {
            OperationRegion (ECRT, SystemIO, 0x0910, 0x02)
            Field (ECRT, ByteAcc, Lock, Preserve)
            {
                ECIN,   8, 
                ECDA,   8
            }

            If (Arg0)
            {
                ECIN = 0x12
                ECDA = 0x29
                ECIN = 0x13
                ECDA = 0x01
                ECIN = 0x00
                ECDA = 0xB3
            }
            Else
            {
                ECIN = 0x12
                ECDA = 0x29
                ECIN = 0x13
                ECDA = 0x00
                ECIN = 0x00
                ECDA = 0xB3
            }
        }

        Device (WMTF)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,  // H...^ wJ
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,  // .H !...A
                /* 0010 */  0x54, 0x46, 0x01, 0x02                           // TF..
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, FP)
                If (FP)
                {
                    TBFP (0x01)
                }
                Else
                {
                    TBFP (0x00)
                }
            }
        }
    }

    Scope (\)
    {
        Mutex (OSUM, 0x00)
        Name (RPR6, 0x00)
        Name (RPR7, 0x00)
        Name (RPR8, 0x00)
        Name (RPR9, 0x00)
        Name (RPRA, 0x00)
        Name (RPRB, 0x00)
        OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSMP,   8
        }

        Method (TBWK, 1, NotSerialized)
        {
            \_SB.PCI0.RP05.TWAK (Arg0)
        }

        Method (TBPS, 1, NotSerialized)
        {
            \_SB.PCI0.RP05.TPTS (Arg0)
        }
    }

    Scope (_GPE)
    {
        Name (PEMA, 0xFFFFFFFF)
        Name (TBRP, 0xFFFFFFFF)
        Method (OSUP, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x0548)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                TB2P,   32, 
                P2TB,   32
            }

            Local1 = 0x64
            P2TB = 0x0D
            While ((Local1 > 0x00))
            {
                Local1 = (Local1 - 0x01)
                Local2 = TB2P /* \_GPE.OSUP.TB2P */
                If ((Local2 == 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                If ((Local2 & 0x01))
                {
                    Break
                }

                Sleep (0x32)
            }

            P2TB = 0x00
            Return (0x01)
        }

        Method (MMTB, 0, NotSerialized)
        {
            Local0 = TBRP /* \_GPE.TBRP */
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            Local2 = SBUS /* \_GPE.MMTB.SBUS */
            Local0 = PEMA /* \_GPE.PEMA */
            Local2 *= 0x00100000
            Local0 += Local2
            Return (Local0)
        }

        Method (GDRP, 0, NotSerialized)
        {
            Local0 = TBRP /* \_GPE.TBRP */
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                PSD3,   2
            }

            PSD3 = 0x00
            Return (PSD3) /* \_GPE.GDRP.PSD3 */
        }

        Method (RPDX, 1, NotSerialized)
        {
            Local0 = TBRP /* \_GPE.TBRP */
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0xA4), 
                PSD3,   2
            }

            PSD3 = Arg0
            Sleep (0x64)
        }

        Method (RPNF, 1, NotSerialized)
        {
            Local0 = PEMA /* \_GPE.PEMA */
            Local1 = (ToInteger (Arg0) - ToInteger (Local0))
            If ((Local1 == 0x8000))
            {
                Notify (\_SB.PCI0.BR1A, 0x00) // Bus Check
            }

            If ((Local1 == 0x9000))
            {
                Notify (\_SB.PCI0.BR1B, 0x00) // Bus Check
            }

            If ((Local1 == 0x00010000))
            {
                Notify (\_SB.PCI0.BR2A, 0x00) // Bus Check
            }

            If ((Local1 == 0x00018000))
            {
                Notify (\_SB.PCI0.BR3A, 0x00) // Bus Check
            }

            If ((Local1 == 0x000E1000))
            {
                Notify (\_SB.PCI0.RP02, 0x00) // Bus Check
            }

            If ((Local1 == 0x000E4000))
            {
                Notify (\_SB.PCI0.RP05, 0x00) // Bus Check
            }

            If ((Local1 == 0x000F0000))
            {
                Notify (\_SB.PCI0.IP2P, 0x00) // Bus Check
            }
        }

        Method (TBFF, 0, NotSerialized)
        {
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32
            }

            Local1 = VEDI /* \_GPE.TBFF.VEDI */
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (OSUP (Local0))
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (OE1X, 0, NotSerialized)
        {
            Name (TSNE, 0xFF)
            Acquire (OSUM, 0xFFFF)
            If ((\_SB.PCI0.RP05.TBHR != 0x01))
            {
                Local0 = TBFF ()
                If ((Local0 == 0x01))
                {
                    Sleep (0x10)
                    Release (OSUM)
                    Return (Zero)
                }

                If ((Local0 == 0x02))
                {
                    If ((TSNE & 0x02))
                    {
                        RPNF (TBRP)
                    }

                    Sleep (0x10)
                    Release (OSUM)
                    Return (Zero)
                }
            }

            If ((TSNE & 0x01))
            {
                SSMP = TBSW /* \TBSW */
            }

            If ((TSNE & 0x02))
            {
                RPNF (TBRP)
            }

            Sleep (0x10)
            Release (OSUM)
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Name (TBHR, 0x01)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((TBHR != 0x01))
            {
                Acquire (OSUM, 0xFFFF)
                DBG8 = 0x51
                Local3 = \_GPE.MMTB ()
                \_GPE.OSUP (Local3)
                Release (OSUM)
            }
        }

        Method (TWAK, 1, NotSerialized)
        {
            Name (RPL1, 0x00)
            Name (RPL6, 0x00)
            Name (RPL7, 0x00)
            Name (RPL8, 0x00)
            Name (RPL9, 0x00)
            Name (RPLA, 0x00)
            Name (RPLB, 0x00)
            If ((TBHR != 0x01))
            {
                Acquire (OSUM, 0xFFFF)
                Local0 = \_GPE.PEMA
                Local0 += 0x000F80B8
                OperationRegion (MLPC, SystemMemory, Local0, 0x04)
                Field (MLPC, AnyAcc, NoLock, Preserve)
                {
                    GPIR,   32
                }

                GPIR |= 0x0800
                Local3 = \_GPE.MMTB ()
                OperationRegion (RP_X, SystemMemory, Local3, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                RPL1 = REG1 /* \_SB_.PCI0.RP05.TWAK.REG1 */
                RPL6 = REG6 /* \_SB_.PCI0.RP05.TWAK.REG6 */
                RPL7 = REG7 /* \_SB_.PCI0.RP05.TWAK.REG7 */
                RPL8 = REG8 /* \_SB_.PCI0.RP05.TWAK.REG8 */
                RPL9 = REG9 /* \_SB_.PCI0.RP05.TWAK.REG9 */
                RPLA = REGA /* \_SB_.PCI0.RP05.TWAK.REGA */
                RPLB = REGB /* \_SB_.PCI0.RP05.TWAK.REGB */
                REG6 = RPR6 /* \RPR6 */
                REG7 = RPR7 /* \RPR7 */
                REG8 = RPR8 /* \RPR8 */
                REG9 = RPR9 /* \RPR9 */
                REGA = RPRA /* \RPRA */
                REGB = RPRB /* \RPRB */
                REG1 = 0x00100007
                Local2 = \_GPE.GDRP ()
                \_GPE.RPDX (Zero)
                Local3 = \_GPE.MMTB ()
                \_GPE.OSUP (Local3)
                SSMP = TBSW /* \TBSW */
                REG1 = RPL1 /* \_SB_.PCI0.RP05.TWAK.RPL1 */
                REG6 = RPL6 /* \_SB_.PCI0.RP05.TWAK.RPL6 */
                REG7 = RPL7 /* \_SB_.PCI0.RP05.TWAK.RPL7 */
                REG8 = RPL8 /* \_SB_.PCI0.RP05.TWAK.RPL8 */
                REG9 = RPL9 /* \_SB_.PCI0.RP05.TWAK.RPL9 */
                REGA = RPLA /* \_SB_.PCI0.RP05.TWAK.RPLA */
                REGB = RPLB /* \_SB_.PCI0.RP05.TWAK.RPLB */
                \_GPE.RPDX (Local2)
                Release (OSUM)
            }
        }

        Method (TPTS, 1, NotSerialized)
        {
            If (((TBHR != 0xFF) && (TBHR != 0x01)))
            {
                Acquire (OSUM, 0xFFFF)
                Local0 = \_GPE.MMTB ()
                OperationRegion (RP_X, SystemMemory, Local0, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                RPR6 = REG6 /* \_SB_.PCI0.RP05.TPTS.REG6 */
                RPR7 = REG7 /* \_SB_.PCI0.RP05.TPTS.REG7 */
                RPR8 = REG8 /* \_SB_.PCI0.RP05.TPTS.REG8 */
                RPR9 = REG9 /* \_SB_.PCI0.RP05.TPTS.REG9 */
                RPRA = REGA /* \_SB_.PCI0.RP05.TPTS.REGA */
                RPRB = REGB /* \_SB_.PCI0.RP05.TPTS.REGB */
                Release (OSUM)
            }
        }
    }

    OperationRegion (_SB.PCI0.LPC0.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.LPC0.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y09)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y09._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, 0x00)
        Name (XNPT, 0x01)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x00)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (0x01)
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PCI0.BR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x01, 
                        Unicode (" Slot01 x8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR1B)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x0B, 
                        Unicode (" Slot11 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        Unicode (" Slot02 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2B)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x15, 
                        Unicode (" Slot21 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2C)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x16, 
                        Unicode (" Slot22 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2D)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x17, 
                        Unicode (" Slot23 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x04, 
                        Unicode (" Slot04 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3B)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x29, 
                        Unicode (" Slot41 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3C)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x2A, 
                        Unicode (" Slot42 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3D)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x2B, 
                        Unicode (" Slot43 x4")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Method (BCLR, 1, NotSerialized)
    {
        Local0 = 0x00
        While ((Local0 < SizeOf (Arg0)))
        {
            BBWR (Arg0, Local0, 0x00)
            Local0++
        }
    }

    Method (BBWR, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, VAL)
        VAL = Arg2
    }

    Method (BBRD, 2, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, VAL)
        Return (VAL) /* \BBRD.VAL_ */
    }

    Method (BWWR, 3, NotSerialized)
    {
        CreateWordField (Arg0, Arg1, VAL)
        VAL = Arg2
    }

    Method (BWRD, 2, NotSerialized)
    {
        CreateWordField (Arg0, Arg1, VAL)
        Return (VAL) /* \BWRD.VAL_ */
    }

    Method (BDWR, 3, NotSerialized)
    {
        CreateDWordField (Arg0, Arg1, VAL)
        VAL = Arg2
    }

    Method (BDRD, 2, NotSerialized)
    {
        CreateDWordField (Arg0, Arg1, VAL)
        Return (VAL) /* \BDRD.VAL_ */
    }

    Method (STRE, 2, NotSerialized)
    {
        Name (STR1, Buffer (0x50){})
        Name (STR2, Buffer (0x50){})
        STR1 = Arg0
        STR2 = Arg1
        Local0 = Zero
        Local1 = One
        While (Local1)
        {
            Local1 = BBRD (STR1, Local0)
            Local2 = BBRD (STR2, Local0)
            If ((Local1 != Local2))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Method (XPTB, 1, NotSerialized)
    {
        Local0 = SizeOf (Arg0)
        If ((ObjectType (Arg0) == 0x02))
        {
            Local0++
        }

        Name (OBUF, Buffer (Local0){})
        OBUF = Arg0
        If ((ObjectType (Arg0) == 0x02))
        {
            Local0--
            OBUF [Local0] = 0x00
        }

        Return (OBUF) /* \XPTB.OBUF */
    }

    Method (STDG, 3, NotSerialized)
    {
        Local0 = Arg0
        If ((Arg0 >= 0x0A))
        {
            Divide (Arg0, 0x0A, Local0, Local1)
            Arg2 = STDG (Local1, Arg1, Arg2)
        }

        Local0 += 0x30
        Arg1 [Arg2] = Local0
        Arg2++
        Return (Arg2)
    }

    Method (XPTS, 1, NotSerialized)
    {
        Name (LBUF, Buffer (0x20){})
        Local0 = STDG (Arg0, LBUF, 0x00)
        LBUF [Local0] = 0x00
        Local0++
        Name (OBUF, Buffer (Local0){})
        OBUF = LBUF /* \XPTS.LBUF */
        Return (OBUF) /* \XPTS.OBUF */
    }

    Method (DISP, 1, NotSerialized)
    {
    }

    Scope (\)
    {
        Mutex (SMIX, 0x01)
        Name (SMBA, 0xCCA98000)
        Name (PSMI, 0x000000B2)
        Method (SNVC, 1, NotSerialized)
        {
            OperationRegion (WWPR, SystemMemory, SMBA, 0x04)
            Field (WWPR, DWordAcc, Lock, Preserve)
            {
                SCDW,   32
            }

            SCDW = Arg0
        }

        Method (SNWB, 2, NotSerialized)
        {
            Local0 = SMBA /* \SMBA */
            Local0 += Arg1
            Local0 += 0x04
            OperationRegion (WWPR, SystemMemory, Local0, 0x01)
            Field (WWPR, ByteAcc, Lock, Preserve)
            {
                SBY0,   8
            }

            CreateByteField (Arg0, Arg1, SVAL)
            SBY0 = SVAL /* \SNWB.SVAL */
        }

        Method (SNRB, 2, NotSerialized)
        {
            Local0 = SMBA /* \SMBA */
            Local0 += Arg1
            Local0 += 0x04
            OperationRegion (WWPR, SystemMemory, Local0, 0x04)
            Field (WWPR, ByteAcc, Lock, Preserve)
            {
                SBY0,   8
            }

            CreateByteField (Arg0, Arg1, SVAL)
            SVAL = SBY0 /* \SNRB.SBY0 */
            Return (Arg0)
        }

        Method (SNVP, 2, NotSerialized)
        {
            Local0 = SMBA /* \SMBA */
            Local0 += Arg1
            Local0 += 0x04
            OperationRegion (WWPR, SystemMemory, Local0, 0x04)
            Field (WWPR, ByteAcc, Lock, Preserve)
            {
                SDW0,   32
            }

            CreateDWordField (Arg0, Arg1, SVAL)
            SDW0 = SVAL /* \SNVP.SVAL */
        }

        Method (SNVG, 2, NotSerialized)
        {
            Local0 = SMBA /* \SMBA */
            Local0 += Arg1
            Local0 += 0x04
            OperationRegion (WWPR, SystemMemory, Local0, 0x04)
            Field (WWPR, ByteAcc, Lock, Preserve)
            {
                SDW0,   32
            }

            CreateDWordField (Arg0, Arg1, SVAL)
            SVAL = SDW0 /* \SNVG.SDW0 */
            Return (Arg0)
        }

        Method (GENS, 3, NotSerialized)
        {
            Acquire (SMIX, 0xFFFF)
            Local0 = Arg1
            If ((ObjectType (Arg1) == 0x01))
            {
                Local0 = SMBI (Arg0, Arg1)
            }

            If ((ObjectType (Arg1) == 0x03))
            {
                Local0 = SMBF (Arg0, Arg1, Arg2)
            }

            Release (SMIX)
            Return (Local0)
        }

        Method (SMBI, 2, NotSerialized)
        {
            SNVC (Arg0)
            Local0 = (SMBA + 0x04)
            OperationRegion (WWPR, SystemMemory, Local0, 0x04)
            Field (WWPR, ByteAcc, Lock, Preserve)
            {
                SDW0,   32
            }

            SDW0 = Arg1
            ASMI ()
            Return (SDW0) /* \SMBI.SDW0 */
        }

        Method (SMBF, 3, NotSerialized)
        {
            If ((Arg2 > 0x1000))
            {
                Return (Arg1)
            }

            If ((SizeOf (Arg1) < Arg2))
            {
                Return (Arg1)
            }

            SNVC (Arg0)
            Divide (Arg2, 0x04, Local3, Local4)
            Local0 = 0x00
            While ((Local0 < Local3))
            {
                SNWB (Arg1, Local0)
                Local0++
            }

            While ((Local0 < Arg2))
            {
                SNVP (Arg1, Local0)
                Local0 += 0x04
            }

            ASMI ()
            Local0 = 0x00
            While ((Local0 < Local3))
            {
                Arg1 = SNRB (Arg1, Local0)
                Local0++
            }

            While ((Local0 < Arg2))
            {
                Arg1 = SNVG (Arg1, Local0)
                Local0 += 0x04
            }

            Return (Arg1)
        }

        Method (ASMI, 0, NotSerialized)
        {
            OperationRegion (SMIR, SystemIO, PSMI, 0x01)
            Field (SMIR, ByteAcc, Lock, Preserve)
            {
                SCMD,   8
            }

            SCMD = 0x04
        }
    }

    Scope (_SB)
    {
        Device (AMW0)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x23)  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xBC, 0xDC, 0x9D, 0x8D, 0x97, 0xA9, 0xDA, 0x11,  // ........
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0xA1, 0xEF, 0x54, 0x92,  // ..."..T.
                /* 0010 */  0x41, 0x41, 0x01, 0x00, 0xCE, 0x93, 0x05, 0xA8,  // AA......
                /* 0018 */  0x97, 0xA9, 0xDA, 0x11, 0xB0, 0x12, 0xB6, 0x22,  // ......."
                /* 0020 */  0xA1, 0xEF, 0x54, 0x92, 0x42, 0x41, 0x01, 0x02,  // ..T.BA..
                /* 0028 */  0xE0, 0x6C, 0x77, 0xA3, 0x88, 0x1E, 0xDB, 0x11,  // .lw.....
                /* 0030 */  0xA9, 0x8B, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .... ..f
                /* 0038 */  0x42, 0x43, 0x01, 0x00, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Name (INFO, Buffer (0x80){})
            Name (ECD0, 0x00)
            Method (WED0, 1, NotSerialized)
            {
                ECD0 = Arg0
                Return (Zero)
            }

            Method (WQBC, 1, NotSerialized)
            {
            }

            Method (WSBC, 1, NotSerialized)
            {
            }

            Method (WCAA, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (WQAA, 1, NotSerialized)
            {
                Acquire (WMIX, 0xFFFF)
                BCLR (INFO)
                If ((Arg0 != 0x00))
                {
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }
                Else
                {
                    BDWR (INFO, 0x00, 0x4C4C4544)
                    BDWR (INFO, 0x04, 0x494D5720)
                    BDWR (INFO, 0x08, 0x01)
                    BDWR (INFO, 0x0C, 0x1000)
                    BDWR (INFO, 0x10, 0x01)
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }

                Release (WMIX)
                Return (Local1)
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (Arg1)
            }

            Method (WMBA, 3, NotSerialized)
            {
                CreateDWordField (Arg2, 0x28, WBUF)
                Local1 = (WBUF + 0x2C)
                If ((Local1 <= 0x1000))
                {
                    Local0 = WMI (Arg2, Local1)
                }

                Return (Local0)
            }

            Method (WMI, 2, NotSerialized)
            {
                If ((Arg1 <= 0x1000))
                {
                    Arg0 = GENS (0x03, Arg0, Arg1)
                }

                Return (Arg0)
            }

            Name (WQMO, Buffer (0x048A)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x7A, 0x04, 0x00, 0x00, 0x68, 0x11, 0x00, 0x00,  // z...h...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x5F, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // ._.....B
                /* 0020 */  0x10, 0x0B, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x8A, 0x5F,  // ..@H..._
                /* 0038 */  0x02, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x40, 0x0A, 0x40,  // x\.A.@.@
                /* 00A8 */  0x58, 0x78, 0x08, 0x45, 0x80, 0x41, 0x49, 0x18,  // Xx.E.AI.
                /* 00B0 */  0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9, 0x80,  // .u1j.H..
                /* 00B8 */  0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A, 0xBF,  // .Q....:.
                /* 00C0 */  0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04, 0x46,  // #9..;..F
                /* 00C8 */  0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42, 0x8D,  // =.c,lFB.
                /* 00D0 */  0xD1, 0x1C, 0x14, 0x81, 0xC6, 0x0D, 0xDA, 0x12,  // ........
                /* 00D8 */  0x61, 0x35, 0xAE, 0xD8, 0x67, 0x66, 0xE1, 0xC3,  // a5..gf..
                /* 00E0 */  0x12, 0xC6, 0x11, 0x1C, 0x58, 0x82, 0x46, 0xD1,  // ....X.F.
                /* 00E8 */  0x34, 0xC7, 0xB3, 0x0D, 0x91, 0xE0, 0x20, 0x42,  // 4..... B
                /* 00F0 */  0x63, 0x64, 0x40, 0xC8, 0xF3, 0xB0, 0x05, 0x7A,  // cd@....z
                /* 00F8 */  0xE4, 0x09, 0xEC, 0x1E, 0x51, 0x0A, 0x11, 0x34,  // ....Q..4
                /* 0100 */  0xDF, 0x13, 0xA9, 0x51, 0x80, 0x36, 0x0C, 0xD9,  // ...Q.6..
                /* 0108 */  0x3A, 0x1B, 0x68, 0xA8, 0xB1, 0x1A, 0x43, 0x11,  // :.h...C.
                /* 0110 */  0x44, 0x84, 0xA0, 0x51, 0x0C, 0x16, 0x21, 0x54,  // D..Q..!T
                /* 0118 */  0x88, 0xFF, 0x7F, 0x94, 0xA8, 0xA7, 0x14, 0x24,  // .......$
                /* 0120 */  0x6A, 0x65, 0x20, 0x42, 0x0B, 0x66, 0x04, 0x66,  // je B.f.f
                /* 0128 */  0x7F, 0x10, 0x24, 0xC6, 0x99, 0x41, 0x87, 0x05,  // ..$..A..
                /* 0130 */  0xCB, 0x00, 0x91, 0x11, 0x41, 0xA3, 0x61, 0x67,  // ....A.ag
                /* 0138 */  0x01, 0x0F, 0xC7, 0x33, 0x69, 0x7E, 0x62, 0x1A,  // ...3i~b.
                /* 0140 */  0x9C, 0x09, 0xC6, 0x86, 0x90, 0x06, 0x08, 0x89,  // ........
                /* 0148 */  0x3A, 0x38, 0x50, 0x02, 0x4B, 0x19, 0x38, 0xB1,  // :8P.K.8.
                /* 0150 */  0x3D, 0x2E, 0x8D, 0xEF, 0x8C, 0xA3, 0x86, 0x38,  // =......8
                /* 0158 */  0xF5, 0x33, 0xF3, 0x3F, 0xC2, 0x5B, 0xF0, 0x11,  // .3.?.[..
                /* 0160 */  0x80, 0x8F, 0xC1, 0x83, 0x3D, 0x84, 0x80, 0x47,  // ....=..G
                /* 0168 */  0xC8, 0xCE, 0x00, 0x06, 0xC4, 0x7B, 0x9F, 0x34,  // .....{.4
                /* 0170 */  0x99, 0x8B, 0xCF, 0x02, 0x30, 0x86, 0x0F, 0xD7,  // ....0...
                /* 0178 */  0xF8, 0x28, 0x34, 0x1E, 0x76, 0x3E, 0x60, 0xE3,  // .(4.v>`.
                /* 0180 */  0xE2, 0xF0, 0x3E, 0x14, 0x9C, 0x70, 0xB1, 0x20,  // ..>..p. 
                /* 0188 */  0x0A, 0x00, 0x21, 0x59, 0xE7, 0x03, 0xF4, 0xAC,  // ..!Y....
                /* 0190 */  0x8F, 0x2D, 0xE0, 0xC3, 0x40, 0xB3, 0x77, 0x08,  // .-..@.w.
                /* 0198 */  0x42, 0xF0, 0x22, 0xE0, 0xA3, 0x83, 0x8F, 0x1B,  // B.".....
                /* 01A0 */  0x1E, 0xF7, 0xF3, 0x06, 0x18, 0x0E, 0x07, 0x1E,  // ........
                /* 01A8 */  0x8E, 0x4F, 0x1B, 0xC0, 0x65, 0x04, 0x5C, 0xDA,  // .O..e.\.
                /* 01B0 */  0x93, 0xC2, 0x04, 0x92, 0xFC, 0x04, 0x90, 0x18,  // ........
                /* 01B8 */  0x18, 0xD4, 0x81, 0xC0, 0x07, 0x0B, 0xB8, 0x92,  // ........
                /* 01C0 */  0xE0, 0x50, 0xC3, 0xF3, 0xC4, 0x1E, 0x10, 0xFE,  // .P......
                /* 01C8 */  0xFF, 0x47, 0x79, 0x22, 0x2F, 0x06, 0x9E, 0xFE,  // .Gy"/...
                /* 01D0 */  0x63, 0x00, 0x8C, 0x03, 0x82, 0xA7, 0x75, 0x52,  // c.....uR
                /* 01D8 */  0xBE, 0x79, 0x3C, 0x48, 0x78, 0x50, 0x61, 0x12,  // .y<HxPa.
                /* 01E0 */  0xF8, 0x94, 0xC0, 0xD0, 0xF8, 0x71, 0x03, 0xAC,  // .....q..
                /* 01E8 */  0xA3, 0xC6, 0x1F, 0x10, 0xE0, 0x9D, 0x24, 0xCE,  // ......$.
                /* 01F0 */  0xAF, 0xCF, 0x01, 0xE8, 0xD0, 0x70, 0x8A, 0x0C,  // .....p..
                /* 01F8 */  0xE4, 0x35, 0xE0, 0xA4, 0x4F, 0xC9, 0xE3, 0x4B,  // .5..O..K
                /* 0200 */  0xE0, 0x33, 0x07, 0xEC, 0xBB, 0xC1, 0x61, 0x1C,  // .3....a.
                /* 0208 */  0x4C, 0x88, 0x08, 0xEF, 0x01, 0x4F, 0x1D, 0xBE,  // L....O..
                /* 0210 */  0x6B, 0x3C, 0x0A, 0x04, 0x8A, 0xD0, 0xDB, 0x99,  // k<......
                /* 0218 */  0x83, 0x9E, 0x42, 0x8C, 0x12, 0xED, 0xAC, 0xC2,  // ..B.....
                /* 0220 */  0x3C, 0x70, 0x44, 0xF1, 0x91, 0xC3, 0x08, 0xEF,  // <pD.....
                /* 0228 */  0x1E, 0xBE, 0x13, 0x3C, 0x80, 0xB4, 0x36, 0x39,  // ...<..69
                /* 0230 */  0xE1, 0x06, 0x7A, 0xE6, 0x60, 0xD1, 0xCE, 0x2C,  // ..z.`..,
                /* 0238 */  0x3A, 0xF8, 0x38, 0xD2, 0x68, 0x50, 0x67, 0x04,  // :.8.hPg.
                /* 0240 */  0x9F, 0x06, 0x3C, 0xAD, 0xA7, 0x18, 0x1F, 0x25,  // ..<....%
                /* 0248 */  0x0C, 0x72, 0x86, 0x07, 0xF6, 0x9C, 0xF0, 0x18,  // .r......
                /* 0250 */  0xE0, 0x01, 0xB3, 0xFB, 0x81, 0x8F, 0x13, 0x3E,  // .......>
                /* 0258 */  0x17, 0xE0, 0x5D, 0x03, 0x6A, 0x86, 0x3E, 0x6C,  // ..].j.>l
                /* 0260 */  0xC0, 0x39, 0x74, 0xE0, 0x4F, 0x13, 0xF8, 0x83,  // .9t.O...
                /* 0268 */  0x05, 0x7E, 0x3C, 0xBE, 0xE6, 0xB0, 0x09, 0x27,  // .~<....'
                /* 0270 */  0xB0, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0xCF,  // ..A.Ffh.
                /* 0278 */  0xF2, 0xB4, 0x5E, 0x03, 0x7C, 0xDA, 0x31, 0x81,  // ..^.|.1.
                /* 0280 */  0xCF, 0x1B, 0xFE, 0xFF, 0xFF, 0x73, 0x3C, 0x1E,  // .....s<.
                /* 0288 */  0xF0, 0x2B, 0x3E, 0x5D, 0x90, 0xBB, 0x82, 0xE7,  // .+>]....
                /* 0290 */  0xEB, 0xB3, 0x0B, 0xB3, 0x31, 0x1E, 0xD4, 0x28,  // ....1..(
                /* 0298 */  0x7C, 0xC0, 0xC1, 0x9D, 0x5D, 0x7C, 0x04, 0xF0,  // |...]|..
                /* 02A0 */  0xD9, 0x05, 0x78, 0x4E, 0xE2, 0x59, 0x02, 0xBC,  // ..xN.Y..
                /* 02A8 */  0x87, 0x00, 0x9F, 0x48, 0xE2, 0x3D, 0x6C, 0xC1,  // ...H.=l.
                /* 02B0 */  0x18, 0x31, 0x1E, 0xF2, 0x8C, 0xAB, 0x1E, 0x86,  // .1......
                /* 02B8 */  0x2E, 0x02, 0x56, 0x77, 0x5F, 0x41, 0x1D, 0xBD,  // ..Vw_A..
                /* 02C0 */  0xC0, 0x04, 0xF5, 0x9A, 0x81, 0x3B, 0xBD, 0x00,  // .....;..
                /* 02C8 */  0x9F, 0x53, 0x16, 0xBC, 0xFF, 0xFF, 0x29, 0x0B,  // .S....).
                /* 02D0 */  0xB8, 0x5F, 0x15, 0xF8, 0x11, 0x05, 0x0C, 0x90,  // ._......
                /* 02D8 */  0x9D, 0x9D, 0x4E, 0x84, 0xF0, 0x5E, 0xF2, 0x1C,  // ..N..^..
                /* 02E0 */  0xE2, 0xDB, 0x95, 0x0F, 0x26, 0x41, 0x9E, 0x03,  // ....&A..
                /* 02E8 */  0x22, 0x3C, 0x65, 0xF1, 0xFB, 0x40, 0x94, 0x98,  // "<e..@..
                /* 02F0 */  0x07, 0x14, 0x29, 0x8A, 0x11, 0x83, 0x3C, 0x61,  // ..)...<a
                /* 02F8 */  0xF9, 0x7A, 0x12, 0xC3, 0xD0, 0xC1, 0xC2, 0x85,  // .z......
                /* 0300 */  0x8F, 0xF0, 0x94, 0x05, 0x58, 0xBC, 0x64, 0x61,  // ....X.da
                /* 0308 */  0x4E, 0x59, 0x30, 0xDF, 0x06, 0x3E, 0x65, 0x81,  // NY0..>e.
                /* 0310 */  0xE3, 0xFF, 0x7F, 0xCA, 0x02, 0xD7, 0xB8, 0x9F,  // ........
                /* 0318 */  0xB2, 0x80, 0x99, 0xF4, 0xA7, 0x80, 0x4F, 0x35,  // ......O5
                /* 0320 */  0x7E, 0x02, 0x28, 0xFA, 0xC1, 0x82, 0xC2, 0xF8,  // ~.(.....
                /* 0328 */  0x94, 0x05, 0xB8, 0x92, 0x77, 0x40, 0x00, 0xCD,  // ....w@..
                /* 0330 */  0xD9, 0xC9, 0xB7, 0x05, 0x83, 0x1D, 0xB3, 0x2F,  // ......./
                /* 0338 */  0x19, 0x3E, 0x25, 0x82, 0xE1, 0x90, 0xE1, 0x3B,  // .>%....;
                /* 0340 */  0xD5, 0xA1, 0x3C, 0x72, 0x3C, 0x05, 0xF8, 0x88,  // ..<r<...
                /* 0348 */  0x05, 0xF6, 0x38, 0xC7, 0x00, 0x1D, 0x57, 0x7C,  // ..8...W|
                /* 0350 */  0xC4, 0xF2, 0xFF, 0xFF, 0x88, 0x05, 0x70, 0xE3,  // ......p.
                /* 0358 */  0x00, 0x82, 0x3F, 0x75, 0xC0, 0xBA, 0x07, 0x84,  // ..?u....
                /* 0360 */  0xF5, 0xA1, 0x03, 0x78, 0xC8, 0x7E, 0x08, 0xE8,  // ...x.~..
                /* 0368 */  0x0C, 0x63, 0xC9, 0x20, 0xB2, 0x71, 0xAE, 0xA1,  // .c. .q..
                /* 0370 */  0x63, 0xB4, 0xF8, 0x85, 0xEA, 0xA6, 0x10, 0xFB,  // c.......
                /* 0378 */  0x60, 0xB8, 0x6C, 0x20, 0x81, 0x7A, 0xB8, 0x16,  // `.l .z..
                /* 0380 */  0x4C, 0x21, 0x51, 0x34, 0x1A, 0x8D, 0x81, 0x09,  // L!Q4....
                /* 0388 */  0x8C, 0xE0, 0x0C, 0x62, 0x40, 0x67, 0x84, 0xD0,  // ...b@g..
                /* 0390 */  0xA1, 0x0C, 0xA7, 0xE2, 0x3C, 0x84, 0xFA, 0xFF,  // ....<...
                /* 0398 */  0x13, 0x0C, 0x75, 0x63, 0xA2, 0xB3, 0xF3, 0xFC,  // ..uc....
                /* 03A0 */  0xF9, 0x6D, 0xC4, 0x27, 0x02, 0x03, 0xFB, 0x0A,  // .m.'....
                /* 03A8 */  0xF1, 0x96, 0x01, 0x96, 0x61, 0x79, 0x71, 0x4F,  // ....ayqO
                /* 03B0 */  0x00, 0xC7, 0x78, 0x92, 0x09, 0xAA, 0x39, 0xD6,  // ..x...9.
                /* 03B8 */  0xA0, 0xE6, 0xE0, 0xAB, 0xC0, 0x1B, 0x99, 0x09,  // ........
                /* 03C0 */  0x7C, 0x05, 0x03, 0xDB, 0x69, 0x06, 0xA3, 0xEF,  // |...i...
                /* 03C8 */  0x4E, 0x00, 0x0A, 0x20, 0x1F, 0x05, 0x7C, 0x5F,  // N.. ..|_
                /* 03D0 */  0x7E, 0x1B, 0x60, 0xB3, 0x78, 0x65, 0x36, 0x9A,  // ~.`.xe6.
                /* 03D8 */  0xCF, 0x9F, 0x88, 0xA1, 0xA3, 0xC4, 0x0C, 0x9D,  // ........
                /* 03E0 */  0x82, 0x78, 0xE8, 0x0E, 0x3A, 0x74, 0xF4, 0x71,  // .x..:t.q
                /* 03E8 */  0xC0, 0x27, 0x2B, 0x5C, 0xB0, 0xC3, 0x17, 0xB4,  // .'+\....
                /* 03F0 */  0xC9, 0x1D, 0xED, 0x89, 0x79, 0x16, 0x9E, 0x27,  // ....y..'
                /* 03F8 */  0x6E, 0xEE, 0x60, 0x3A, 0x22, 0xC1, 0x18, 0x3C,  // n.`:"..<
                /* 0400 */  0x66, 0xF2, 0x60, 0x16, 0x38, 0x79, 0x50, 0xFC,  // f.`.8yP.
                /* 0408 */  0xFF, 0x27, 0x0F, 0x13, 0x1E, 0x13, 0xF6, 0x70,  // .'.....p
                /* 0410 */  0x48, 0x0F, 0x1D, 0x1E, 0x19, 0x1F, 0xA7, 0x4F,  // H......O
                /* 0418 */  0x3F, 0x0C, 0xFB, 0x74, 0xCE, 0xA5, 0xE8, 0x19,  // ?..t....
                /* 0420 */  0xE9, 0x8E, 0xF1, 0xCC, 0x85, 0x81, 0xF5, 0xC8,  // ........
                /* 0428 */  0x39, 0xAC, 0xD1, 0xC2, 0x1E, 0xF0, 0x73, 0x88,  // 9.....s.
                /* 0430 */  0xEF, 0x30, 0x3E, 0xF0, 0x30, 0x58, 0x9F, 0x5E,  // .0>.0X.^
                /* 0438 */  0xC0, 0x71, 0xFC, 0x82, 0x7F, 0x1A, 0x00, 0xCF,  // .q......
                /* 0440 */  0x01, 0xC4, 0x63, 0x78, 0x01, 0xE1, 0xE7, 0x13,  // ..cx....
                /* 0448 */  0xD9, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32,  // .....U.2
                /* 0450 */  0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63,  // 5.4...Rc
                /* 0458 */  0xC6, 0x46, 0x62, 0x11, 0x0B, 0xD5, 0x48, 0x1D,  // .Fb...H.
                /* 0460 */  0x6A, 0xB1, 0x02, 0xB1, 0xA4, 0xF7, 0x85, 0x40,  // j......@
                /* 0468 */  0x2C, 0xCA, 0x03, 0x08, 0x8B, 0x6B, 0x02, 0x84,  // ,....k..
                /* 0470 */  0x09, 0x5F, 0x92, 0x40, 0x1C, 0x1B, 0x84, 0x8A,  // ._.@....
                /* 0478 */  0xD5, 0x71, 0x86, 0xD3, 0xF8, 0x0C, 0x22, 0x20,  // .q...." 
                /* 0480 */  0x87, 0xF0, 0x01, 0xC4, 0x22, 0x81, 0x08, 0xC8,  // ...."...
                /* 0488 */  0xFF, 0x7F                                       // ..
            })
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB.PCI0)
    {
        Method (UPRW, 0, NotSerialized)
        {
            Local0 = GENS (0x18, 0x01, 0x00)
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.EH01)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = UPRW ()
            If ((Local0 == 0x03))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x03
                })
            }

            If ((Local0 == 0x01))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x01
                })
            }

            Return (Package (0x02)
            {
                0x0D, 
                0x00
            })
        }
    }

    Scope (_SB.PCI0.EHC2)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = UPRW ()
            If ((Local0 == 0x03))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x03
                })
            }

            If ((Local0 == 0x01))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x01
                })
            }

            Return (Package (0x02)
            {
                0x0D, 
                0x00
            })
        }
    }

    Scope (_SB.PCI0.XHCI)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Local0 = UPRW ()
            If ((Local0 == 0x03))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x04
                })
            }

            If ((Local0 == 0x01))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    0x01
                })
            }

            Return (Package (0x02)
            {
                0x0D, 
                0x00
            })
        }
    }

    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
        If (Arg0){}
    }
}

